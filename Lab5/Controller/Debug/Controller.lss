
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001ed2  00001f66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ed2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035d  00800122  00800122  00001f88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026e3  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc0  00000000  00000000  000048db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b6  00000000  00000000  0000589b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00006c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f7  00000000  00000000  0000776c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002762  00000000  00000000  00008063  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  0000a7c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 37 03 	jmp	0x66e	; 0x66e <__vector_1>
       8:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_2>
       c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_3>
      10:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_4>
      14:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_9>
      28:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_10>
      2c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_11>
      30:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__vector_12>
      34:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_13>
      38:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_14>
      3c:	0c 94 6f 07 	jmp	0xede	; 0xede <__vector_15>
      40:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__vector_16>
      44:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_17>
      48:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__vector_18>
      4c:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_19>
      50:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_20>
      54:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_21>
      58:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 ed       	ldi	r30, 0xD2	; 210
      70:	fe e1       	ldi	r31, 0x1E	; 30
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 32       	cpi	r26, 0x22	; 34
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e2       	ldi	r26, 0x22	; 34
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 37       	cpi	r26, 0x7F	; 127
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
      92:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <trafficLights>:
#include "TinyTimber.h"
#include "avr/io.h"



void trafficLights(Controller *self, int arg) {
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	fc 01       	movw	r30, r24
	if (self->northQueue == 0 && self->southQueue == 0) {
      a8:	84 81       	ldd	r24, Z+4	; 0x04
      aa:	95 81       	ldd	r25, Z+5	; 0x05
      ac:	00 97       	sbiw	r24, 0x00	; 0
      ae:	09 f0       	breq	.+2      	; 0xb2 <trafficLights+0x18>
      b0:	82 c0       	rjmp	.+260    	; 0x1b6 <trafficLights+0x11c>
      b2:	86 81       	ldd	r24, Z+6	; 0x06
      b4:	97 81       	ldd	r25, Z+7	; 0x07
      b6:	89 2b       	or	r24, r25
      b8:	71 f5       	brne	.+92     	; 0x116 <trafficLights+0x7c>
		ASYNC(self, sendToSimulator, 0xA);
      ba:	0f 2e       	mov	r0, r31
      bc:	fa e0       	ldi	r31, 0x0A	; 10
      be:	cf 2e       	mov	r12, r31
      c0:	d1 2c       	mov	r13, r1
      c2:	f0 2d       	mov	r31, r0
      c4:	0f 2e       	mov	r0, r31
      c6:	f7 ee       	ldi	r31, 0xE7	; 231
      c8:	ef 2e       	mov	r14, r31
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	ff 2e       	mov	r15, r31
      ce:	f0 2d       	mov	r31, r0
      d0:	8f 01       	movw	r16, r30
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	a9 01       	movw	r20, r18
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
      e2:	6e c0       	rjmp	.+220    	; 0x1c0 <trafficLights+0x126>
	} else if (self->northQueue > 0 && self->southQueue == 0) {
      e4:	86 81       	ldd	r24, Z+6	; 0x06
      e6:	97 81       	ldd	r25, Z+7	; 0x07
      e8:	89 2b       	or	r24, r25
      ea:	79 f5       	brne	.+94     	; 0x14a <trafficLights+0xb0>
		ASYNC(self, sendToSimulator, 0x9);
      ec:	0f 2e       	mov	r0, r31
      ee:	f9 e0       	ldi	r31, 0x09	; 9
      f0:	cf 2e       	mov	r12, r31
      f2:	d1 2c       	mov	r13, r1
      f4:	f0 2d       	mov	r31, r0
      f6:	0f 2e       	mov	r0, r31
      f8:	f7 ee       	ldi	r31, 0xE7	; 231
      fa:	ef 2e       	mov	r14, r31
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	ff 2e       	mov	r15, r31
     100:	f0 2d       	mov	r31, r0
     102:	8f 01       	movw	r16, r30
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	a9 01       	movw	r20, r18
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	cb 01       	movw	r24, r22
     110:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
     114:	55 c0       	rjmp	.+170    	; 0x1c0 <trafficLights+0x126>
	} else if (self->northQueue == 0 && self->southQueue > 0) {
     116:	86 81       	ldd	r24, Z+6	; 0x06
     118:	97 81       	ldd	r25, Z+7	; 0x07
     11a:	18 16       	cp	r1, r24
     11c:	19 06       	cpc	r1, r25
     11e:	ac f4       	brge	.+42     	; 0x14a <trafficLights+0xb0>
		ASYNC(self, sendToSimulator, 0x6);
     120:	0f 2e       	mov	r0, r31
     122:	f6 e0       	ldi	r31, 0x06	; 6
     124:	cf 2e       	mov	r12, r31
     126:	d1 2c       	mov	r13, r1
     128:	f0 2d       	mov	r31, r0
     12a:	0f 2e       	mov	r0, r31
     12c:	f7 ee       	ldi	r31, 0xE7	; 231
     12e:	ef 2e       	mov	r14, r31
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	ff 2e       	mov	r15, r31
     134:	f0 2d       	mov	r31, r0
     136:	8f 01       	movw	r16, r30
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	a9 01       	movw	r20, r18
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	cb 01       	movw	r24, r22
     144:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
     148:	3b c0       	rjmp	.+118    	; 0x1c0 <trafficLights+0x126>
	} else if (self->previousQueue == 0) {
     14a:	80 85       	ldd	r24, Z+8	; 0x08
     14c:	91 85       	ldd	r25, Z+9	; 0x09
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	c9 f4       	brne	.+50     	; 0x184 <trafficLights+0xea>
		self->previousQueue = 1;
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	91 87       	std	Z+9, r25	; 0x09
     158:	80 87       	std	Z+8, r24	; 0x08
		ASYNC(self, sendToSimulator, 0x6);
     15a:	0f 2e       	mov	r0, r31
     15c:	f6 e0       	ldi	r31, 0x06	; 6
     15e:	cf 2e       	mov	r12, r31
     160:	d1 2c       	mov	r13, r1
     162:	f0 2d       	mov	r31, r0
     164:	0f 2e       	mov	r0, r31
     166:	f7 ee       	ldi	r31, 0xE7	; 231
     168:	ef 2e       	mov	r14, r31
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ff 2e       	mov	r15, r31
     16e:	f0 2d       	mov	r31, r0
     170:	8f 01       	movw	r16, r30
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	a9 01       	movw	r20, r18
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	cb 01       	movw	r24, r22
     17e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
     182:	1e c0       	rjmp	.+60     	; 0x1c0 <trafficLights+0x126>
	} else if (self->previousQueue == 1) {
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	e1 f4       	brne	.+56     	; 0x1c0 <trafficLights+0x126>
		self->previousQueue = 0;
     188:	11 86       	std	Z+9, r1	; 0x09
     18a:	10 86       	std	Z+8, r1	; 0x08
		ASYNC(self, sendToSimulator, 0x9);
     18c:	0f 2e       	mov	r0, r31
     18e:	f9 e0       	ldi	r31, 0x09	; 9
     190:	cf 2e       	mov	r12, r31
     192:	d1 2c       	mov	r13, r1
     194:	f0 2d       	mov	r31, r0
     196:	0f 2e       	mov	r0, r31
     198:	f7 ee       	ldi	r31, 0xE7	; 231
     19a:	ef 2e       	mov	r14, r31
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	ff 2e       	mov	r15, r31
     1a0:	f0 2d       	mov	r31, r0
     1a2:	8f 01       	movw	r16, r30
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	a9 01       	movw	r20, r18
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	cb 01       	movw	r24, r22
     1b0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <trafficLights+0x126>


void trafficLights(Controller *self, int arg) {
	if (self->northQueue == 0 && self->southQueue == 0) {
		ASYNC(self, sendToSimulator, 0xA);
	} else if (self->northQueue > 0 && self->southQueue == 0) {
     1b6:	18 16       	cp	r1, r24
     1b8:	19 06       	cpc	r1, r25
     1ba:	0c f4       	brge	.+2      	; 0x1be <trafficLights+0x124>
     1bc:	93 cf       	rjmp	.-218    	; 0xe4 <trafficLights+0x4a>
     1be:	c5 cf       	rjmp	.-118    	; 0x14a <trafficLights+0xb0>
		ASYNC(self, sendToSimulator, 0x6);
	} else if (self->previousQueue == 1) {
		self->previousQueue = 0;
		ASYNC(self, sendToSimulator, 0x9);
	}
}
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	08 95       	ret

000001ce <sendToSimulator>:
		}
		ASYNC(self, trafficLights, 0);
	}
}

void sendToSimulator(Controller *self, uint8_t data) {
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
     1da:	cf 93       	push	r28
     1dc:	c6 2f       	mov	r28, r22
	ASYNC(self, updateNorth, data); // show instruction from avr
     1de:	c6 2e       	mov	r12, r22
     1e0:	d1 2c       	mov	r13, r1
     1e2:	0f 2e       	mov	r0, r31
     1e4:	fd e4       	ldi	r31, 0x4D	; 77
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	ff 2e       	mov	r15, r31
     1ec:	f0 2d       	mov	r31, r0
     1ee:	8c 01       	movw	r16, r24
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	a9 01       	movw	r20, r18
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	cb 01       	movw	r24, r22
     1fc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
	UDR0 = data;	// send instruction to pc
     200:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <bitUSART>:
		ASYNC(self, sendToSimulator, 0x9);
	}
}


void bitUSART(Controller *self, uint8_t data) {
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	5c 01       	movw	r10, r24
     228:	c6 2f       	mov	r28, r22
	ASYNC(self, updateSouth, data); // show instruction from pc
     22a:	c6 2e       	mov	r12, r22
     22c:	d1 2c       	mov	r13, r1
     22e:	0f 2e       	mov	r0, r31
     230:	f6 e5       	ldi	r31, 0x56	; 86
     232:	ef 2e       	mov	r14, r31
     234:	f2 e0       	ldi	r31, 0x02	; 2
     236:	ff 2e       	mov	r15, r31
     238:	f0 2d       	mov	r31, r0
     23a:	8c 01       	movw	r16, r24
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	a9 01       	movw	r20, r18
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	cb 01       	movw	r24, r22
     248:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
	
	if ((data & 1) == 1) {					// Northbound car arrival sensor activated
     24c:	c0 ff       	sbrs	r28, 0
     24e:	17 c0       	rjmp	.+46     	; 0x27e <bitUSART+0x6a>
		self->northQueue++;
     250:	f5 01       	movw	r30, r10
     252:	84 81       	ldd	r24, Z+4	; 0x04
     254:	95 81       	ldd	r25, Z+5	; 0x05
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	95 83       	std	Z+5, r25	; 0x05
     25a:	84 83       	std	Z+4, r24	; 0x04
		ASYNC(self, trafficLights, 0);
     25c:	c1 2c       	mov	r12, r1
     25e:	d1 2c       	mov	r13, r1
     260:	0f 2e       	mov	r0, r31
     262:	fd e4       	ldi	r31, 0x4D	; 77
     264:	ef 2e       	mov	r14, r31
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	ff 2e       	mov	r15, r31
     26a:	f0 2d       	mov	r31, r0
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	a9 01       	movw	r20, r18
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	cb 01       	movw	r24, r22
     278:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
     27c:	53 c0       	rjmp	.+166    	; 0x324 <bitUSART+0x110>
	} else if (((data >> 1) & 1) == 1) {	// Northbound bridge entry sensor activated
     27e:	c1 ff       	sbrs	r28, 1
     280:	1b c0       	rjmp	.+54     	; 0x2b8 <bitUSART+0xa4>
		if (self->northQueue > 0) {
     282:	f5 01       	movw	r30, r10
     284:	84 81       	ldd	r24, Z+4	; 0x04
     286:	95 81       	ldd	r25, Z+5	; 0x05
     288:	18 16       	cp	r1, r24
     28a:	19 06       	cpc	r1, r25
     28c:	1c f4       	brge	.+6      	; 0x294 <bitUSART+0x80>
			self->northQueue--;
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	95 83       	std	Z+5, r25	; 0x05
     292:	84 83       	std	Z+4, r24	; 0x04
		}
		ASYNC(self, trafficLights, 0);
     294:	c1 2c       	mov	r12, r1
     296:	d1 2c       	mov	r13, r1
     298:	0f 2e       	mov	r0, r31
     29a:	fd e4       	ldi	r31, 0x4D	; 77
     29c:	ef 2e       	mov	r14, r31
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ff 2e       	mov	r15, r31
     2a2:	f0 2d       	mov	r31, r0
     2a4:	85 01       	movw	r16, r10
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	a9 01       	movw	r20, r18
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	cb 01       	movw	r24, r22
     2b2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
     2b6:	36 c0       	rjmp	.+108    	; 0x324 <bitUSART+0x110>
	} else if (((data >> 2) & 1) == 1) {	// Southbound car arrival sensor activated
     2b8:	c2 ff       	sbrs	r28, 2
     2ba:	18 c0       	rjmp	.+48     	; 0x2ec <bitUSART+0xd8>
		self->southQueue++;
     2bc:	f5 01       	movw	r30, r10
     2be:	86 81       	ldd	r24, Z+6	; 0x06
     2c0:	97 81       	ldd	r25, Z+7	; 0x07
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	97 83       	std	Z+7, r25	; 0x07
     2c6:	86 83       	std	Z+6, r24	; 0x06
		ASYNC(self, trafficLights, 0);
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	0f 2e       	mov	r0, r31
     2ce:	fd e4       	ldi	r31, 0x4D	; 77
     2d0:	ef 2e       	mov	r14, r31
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	ff 2e       	mov	r15, r31
     2d6:	f0 2d       	mov	r31, r0
     2d8:	85 01       	movw	r16, r10
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	cb 01       	movw	r24, r22
     2e6:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
     2ea:	1c c0       	rjmp	.+56     	; 0x324 <bitUSART+0x110>
	} else if (((data >> 3) & 1) == 1) {	// Southbound bridge entry sensor activated
     2ec:	c3 ff       	sbrs	r28, 3
     2ee:	1a c0       	rjmp	.+52     	; 0x324 <bitUSART+0x110>
		if (self->southQueue > 0) {
     2f0:	f5 01       	movw	r30, r10
     2f2:	86 81       	ldd	r24, Z+6	; 0x06
     2f4:	97 81       	ldd	r25, Z+7	; 0x07
     2f6:	18 16       	cp	r1, r24
     2f8:	19 06       	cpc	r1, r25
     2fa:	1c f4       	brge	.+6      	; 0x302 <bitUSART+0xee>
			self->southQueue--;
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	97 83       	std	Z+7, r25	; 0x07
     300:	86 83       	std	Z+6, r24	; 0x06
		}
		ASYNC(self, trafficLights, 0);
     302:	c1 2c       	mov	r12, r1
     304:	d1 2c       	mov	r13, r1
     306:	0f 2e       	mov	r0, r31
     308:	fd e4       	ldi	r31, 0x4D	; 77
     30a:	ef 2e       	mov	r14, r31
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
     312:	85 01       	movw	r16, r10
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	a9 01       	movw	r20, r18
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	cb 01       	movw	r24, r22
     320:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
	}
}
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	ff 90       	pop	r15
     32c:	ef 90       	pop	r14
     32e:	df 90       	pop	r13
     330:	cf 90       	pop	r12
     332:	bf 90       	pop	r11
     334:	af 90       	pop	r10
     336:	08 95       	ret

00000338 <writeChar>:

#define FOSC 8000000UL
#define BAUD 9600
#define MYUBRR (((FOSC / (BAUD * 16UL))) - 1)

void writeChar(char ch, int pos) {
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	64 97       	sbiw	r28, 0x14	; 20
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
	// Writes a char ch on position pos on the lcd
	char mask = 0x00;
	char lcddr = 0xEC;
	uint16_t SCCTable[10] =  {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
     34c:	94 e1       	ldi	r25, 0x14	; 20
     34e:	ee e0       	ldi	r30, 0x0E	; 14
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	de 01       	movw	r26, r28
     354:	11 96       	adiw	r26, 0x01	; 1
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	9a 95       	dec	r25
     35c:	e1 f7       	brne	.-8      	; 0x356 <writeChar+0x1e>
	uint16_t sccChar = 0x0000;
	char nibble = 0x00;
	int number;
	
	// checks if ch is in 0..9
	if (isdigit(ch)) {
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	20 53       	subi	r18, 0x30	; 48
     364:	31 09       	sbc	r19, r1
     366:	2a 30       	cpi	r18, 0x0A	; 10
     368:	31 05       	cpc	r19, r1
     36a:	10 f4       	brcc	.+4      	; 0x370 <writeChar+0x38>
		number = ch - '0';
     36c:	f9 01       	movw	r30, r18
     36e:	04 c0       	rjmp	.+8      	; 0x378 <writeChar+0x40>
	} else if (ch <= 9 && ch >= 0) {
     370:	8a 30       	cpi	r24, 0x0A	; 10
     372:	70 f5       	brcc	.+92     	; 0x3d0 <writeChar+0x98>
		number = ch;
     374:	e8 2f       	mov	r30, r24
     376:	f0 e0       	ldi	r31, 0x00	; 0
	} else {
		return;
	}

	// get the scc value from our scc table
	sccChar = SCCTable[number];
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	ec 0f       	add	r30, r28
     37e:	fd 1f       	adc	r31, r29
     380:	21 81       	ldd	r18, Z+1	; 0x01
     382:	32 81       	ldd	r19, Z+2	; 0x02
	
	// decides which mask is used depending on if the desired position is even or not
	if (pos % 2 == 0) {
     384:	cb 01       	movw	r24, r22
     386:	60 ff       	sbrs	r22, 0
     388:	02 c0       	rjmp	.+4      	; 0x38e <writeChar+0x56>
		mask = 0xF0;
	} else {
		mask = 0x0F;
     38a:	5f e0       	ldi	r21, 0x0F	; 15
     38c:	01 c0       	rjmp	.+2      	; 0x390 <writeChar+0x58>
	// get the scc value from our scc table
	sccChar = SCCTable[number];
	
	// decides which mask is used depending on if the desired position is even or not
	if (pos % 2 == 0) {
		mask = 0xF0;
     38e:	50 ef       	ldi	r21, 0xF0	; 240
	} else {
		mask = 0x0F;
	}
	
	// checks if the desired position is in 0..5
	if (pos < 0 || pos > 5) {
     390:	06 97       	sbiw	r24, 0x06	; 6
     392:	f0 f4       	brcc	.+60     	; 0x3d0 <writeChar+0x98>
		return;
	}
	
	// 5, 4 >> LCDDR2 and 3, 2 >> LCDDR1 and 1, 0 >> LCDDR0
	lcddr += pos >> 1;
     394:	cb 01       	movw	r24, r22
     396:	95 95       	asr	r25
     398:	87 95       	ror	r24
     39a:	a8 2f       	mov	r26, r24
     39c:	9c ee       	ldi	r25, 0xEC	; 236
     39e:	98 0f       	add	r25, r24
	for (int i = 0; i < 4; i++) {
		nibble = sccChar & 0x000f;
		sccChar = sccChar >> 4;
		
		// shift nibble left 4 times if pos is uneven because then mask = 0x0F
		if (pos & 0x01) {
     3a0:	61 70       	andi	r22, 0x01	; 1
     3a2:	77 27       	eor	r23, r23
	// 5, 4 >> LCDDR2 and 3, 2 >> LCDDR1 and 1, 0 >> LCDDR0
	lcddr += pos >> 1;
	
	// use our 4 nibbles to show the desired number at the desired position
	for (int i = 0; i < 4; i++) {
		nibble = sccChar & 0x000f;
     3a4:	42 2f       	mov	r20, r18
     3a6:	4f 70       	andi	r20, 0x0F	; 15
		sccChar = sccChar >> 4;
     3a8:	32 95       	swap	r19
     3aa:	22 95       	swap	r18
     3ac:	2f 70       	andi	r18, 0x0F	; 15
     3ae:	23 27       	eor	r18, r19
     3b0:	3f 70       	andi	r19, 0x0F	; 15
     3b2:	23 27       	eor	r18, r19
		
		// shift nibble left 4 times if pos is uneven because then mask = 0x0F
		if (pos & 0x01) {
     3b4:	61 15       	cp	r22, r1
     3b6:	71 05       	cpc	r23, r1
     3b8:	11 f0       	breq	.+4      	; 0x3be <writeChar+0x86>
			nibble = nibble << 4;
     3ba:	42 95       	swap	r20
     3bc:	40 7f       	andi	r20, 0xF0	; 240
		}

		// use the nibble and the mask to light the parts that nibble says
		_SFR_MEM8(lcddr) =  ((_SFR_MEM8(lcddr) & mask) | nibble);
     3be:	e9 2f       	mov	r30, r25
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	85 23       	and	r24, r21
     3c6:	84 2b       	or	r24, r20
     3c8:	80 83       	st	Z, r24
		lcddr += 5;
     3ca:	9b 5f       	subi	r25, 0xFB	; 251
	
	// 5, 4 >> LCDDR2 and 3, 2 >> LCDDR1 and 1, 0 >> LCDDR0
	lcddr += pos >> 1;
	
	// use our 4 nibbles to show the desired number at the desired position
	for (int i = 0; i < 4; i++) {
     3cc:	a9 13       	cpse	r26, r25
     3ce:	ea cf       	rjmp	.-44     	; 0x3a4 <writeChar+0x6c>

		// use the nibble and the mask to light the parts that nibble says
		_SFR_MEM8(lcddr) =  ((_SFR_MEM8(lcddr) & mask) | nibble);
		lcddr += 5;
	}
}
     3d0:	64 96       	adiw	r28, 0x14	; 20
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <printAt>:

void printAt(long num, int pos) {
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	4b 01       	movw	r8, r22
     3f8:	5c 01       	movw	r10, r24
     3fa:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     3fc:	24 e6       	ldi	r18, 0x64	; 100
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divmodsi4>
     408:	0f 2e       	mov	r0, r31
     40a:	fa e0       	ldi	r31, 0x0A	; 10
     40c:	cf 2e       	mov	r12, r31
     40e:	d1 2c       	mov	r13, r1
     410:	e1 2c       	mov	r14, r1
     412:	f1 2c       	mov	r15, r1
     414:	f0 2d       	mov	r31, r0
     416:	a7 01       	movw	r20, r14
     418:	96 01       	movw	r18, r12
     41a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divmodsi4>
     41e:	be 01       	movw	r22, r28
     420:	80 e3       	ldi	r24, 0x30	; 48
     422:	82 0f       	add	r24, r18
     424:	0e 94 9c 01 	call	0x338	; 0x338 <writeChar>
	pp++;
     428:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     42a:	c5 01       	movw	r24, r10
     42c:	b4 01       	movw	r22, r8
     42e:	a7 01       	movw	r20, r14
     430:	96 01       	movw	r18, r12
     432:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__divmodsi4>
     436:	86 2f       	mov	r24, r22
     438:	be 01       	movw	r22, r28
     43a:	80 5d       	subi	r24, 0xD0	; 208
     43c:	0e 94 9c 01 	call	0x338	; 0x338 <writeChar>
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	9f 90       	pop	r9
     452:	8f 90       	pop	r8
     454:	08 95       	ret

00000456 <init>:

void init() {
	//Clock prescaler
	CLKPR = 0x80;
     456:	e1 e6       	ldi	r30, 0x61	; 97
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 e8       	ldi	r24, 0x80	; 128
     45c:	80 83       	st	Z, r24
	CLKPR = 0x00;
     45e:	10 82       	st	Z, r1
	
	//LCD
	LCDCRA = 0xC0;			//LCD ENABLE and LOW POWER WAVEFORM
     460:	80 ec       	ldi	r24, 0xC0	; 192
     462:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	LCDCRB = 0xB7;			//AsyncClock, 1/3 Bias, 1/4 Duty, 25 Segments
     466:	97 eb       	ldi	r25, 0xB7	; 183
     468:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	LCDFRR = 0x07;			//LCD Clock Divide 32 Hz
     46c:	97 e0       	ldi	r25, 0x07	; 7
     46e:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	LCDCCR = 0x0F;			//3.35 Volt
     472:	9f e0       	ldi	r25, 0x0F	; 15
     474:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	TCCR1B = 0x0D;			//Clock prescaler set to 1024 and CFC.
     478:	9d e0       	ldi	r25, 0x0D	; 13
     47a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	//INTERRUPT
	EIFR = 0xC0;			//Interrupt request
     47e:	8c bb       	out	0x1c, r24	; 28
	EIMSK = 0xC0;			//Cause an interrupt
     480:	8d bb       	out	0x1d, r24	; 29
	
	//USART
	UBRR0H = MYUBRR >> 8;
     482:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR;
     486:	83 e3       	ldi	r24, 0x33	; 51
     488:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     48c:	88 e9       	ldi	r24, 0x98	; 152
     48e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
     492:	8e e0       	ldi	r24, 0x0E	; 14
     494:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     498:	08 95       	ret

0000049a <updateNorth>:

}

void updateNorth(Controller *self, int data) {
	printAt(data, 0);
     49a:	07 2e       	mov	r0, r23
     49c:	00 0c       	add	r0, r0
     49e:	88 0b       	sbc	r24, r24
     4a0:	99 0b       	sbc	r25, r25
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <printAt>
     4aa:	08 95       	ret

000004ac <updateSouth>:
}

void updateSouth(Controller *self, int data) {
	printAt(data, 4);
     4ac:	07 2e       	mov	r0, r23
     4ae:	00 0c       	add	r0, r0
     4b0:	88 0b       	sbc	r24, r24
     4b2:	99 0b       	sbc	r25, r25
     4b4:	44 e0       	ldi	r20, 0x04	; 4
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <printAt>
     4bc:	08 95       	ret

000004be <main>:

Controller controller = initController(0, 0, 0);
USART usart = initUSARTInterrupt(&controller);

int main(void) {
   init();
     4be:	0e 94 2b 02 	call	0x456	; 0x456 <init>
   
   INSTALL(&usart, receivedUSART, IRQ_USART0_RX);
     4c2:	48 e0       	ldi	r20, 0x08	; 8
     4c4:	64 ec       	ldi	r22, 0xC4	; 196
     4c6:	7e e0       	ldi	r23, 0x0E	; 14
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <install>
   return TINYTIMBER(&controller, updateNorth, 0);
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	6d e4       	ldi	r22, 0x4D	; 77
     4d6:	72 e0       	ldi	r23, 0x02	; 2
     4d8:	82 e2       	ldi	r24, 0x22	; 34
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <tinytimber>
}
     4e0:	08 95       	ret

000004e2 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <initialize+0x6>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <initialize+0x8>
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	8f e1       	ldi	r24, 0x1F	; 31
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	2f ef       	ldi	r18, 0xFF	; 255
     4f4:	32 e0       	ldi	r19, 0x02	; 2
     4f6:	fc 01       	movw	r30, r24
     4f8:	70 97       	sbiw	r30, 0x10	; 16
     4fa:	91 83       	std	Z+1, r25	; 0x01
     4fc:	80 83       	st	Z, r24
     4fe:	40 96       	adiw	r24, 0x10	; 16
     500:	82 17       	cp	r24, r18
     502:	93 07       	cpc	r25, r19
     504:	c1 f7       	brne	.-16     	; 0x4f6 <initialize+0x14>
     506:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <messages+0xe1>
     50a:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <messages+0xe0>
     50e:	ea e5       	ldi	r30, 0x5A	; 90
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	87 e7       	ldi	r24, 0x77	; 119
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	80 83       	st	Z, r24
     51a:	84 e9       	ldi	r24, 0x94	; 148
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	96 8f       	std	Z+30, r25	; 0x1e
     520:	85 8f       	std	Z+29, r24	; 0x1d
     522:	a1 eb       	ldi	r26, 0xB1	; 177
     524:	b1 e0       	ldi	r27, 0x01	; 1
     526:	b3 af       	std	Z+59, r27	; 0x3b
     528:	a2 af       	std	Z+58, r26	; 0x3a
     52a:	1d 92       	st	X+, r1
     52c:	1c 92       	st	X, r1
     52e:	fa 83       	std	Y+2, r31	; 0x02
     530:	e9 83       	std	Y+1, r30	; 0x01
     532:	eb e5       	ldi	r30, 0x5B	; 91
     534:	f3 e0       	ldi	r31, 0x03	; 3
     536:	fc 83       	std	Y+4, r31	; 0x04
     538:	eb 83       	std	Y+3, r30	; 0x03
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	9a 81       	ldd	r25, Y+2	; 0x02
     53e:	06 96       	adiw	r24, 0x06	; 6
     540:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <setjmp>
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	9c 81       	ldd	r25, Y+4	; 0x04
     548:	e9 81       	ldd	r30, Y+1	; 0x01
     54a:	fa 81       	ldd	r31, Y+2	; 0x02
     54c:	97 8b       	std	Z+23, r25	; 0x17
     54e:	86 8b       	std	Z+22, r24	; 0x16
     550:	91 8f       	std	Z+25, r25	; 0x19
     552:	80 8f       	std	Z+24, r24	; 0x18
     554:	85 e2       	ldi	r24, 0x25	; 37
     556:	9e e0       	ldi	r25, 0x0E	; 14
     558:	94 8f       	std	Z+28, r25	; 0x1c
     55a:	83 8f       	std	Z+27, r24	; 0x1b
     55c:	15 82       	std	Z+5, r1	; 0x05
     55e:	14 82       	std	Z+4, r1	; 0x04
     560:	7d 96       	adiw	r30, 0x1d	; 29
     562:	fa 83       	std	Y+2, r31	; 0x02
     564:	e9 83       	std	Y+1, r30	; 0x01
     566:	eb 81       	ldd	r30, Y+3	; 0x03
     568:	fc 81       	ldd	r31, Y+4	; 0x04
     56a:	e0 5a       	subi	r30, 0xA0	; 160
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	fc 83       	std	Y+4, r31	; 0x04
     570:	eb 83       	std	Y+3, r30	; 0x03
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	9a 81       	ldd	r25, Y+2	; 0x02
     576:	8e 5c       	subi	r24, 0xCE	; 206
     578:	91 40       	sbci	r25, 0x01	; 1
     57a:	f9 f6       	brne	.-66     	; 0x53a <__stack+0x3b>
     57c:	e2 ef       	ldi	r30, 0xF2	; 242
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	11 82       	std	Z+1, r1	; 0x01
     582:	10 82       	st	Z, r1
     584:	15 82       	std	Z+5, r1	; 0x05
     586:	14 82       	std	Z+4, r1	; 0x04
     588:	13 82       	std	Z+3, r1	; 0x03
     58a:	12 82       	std	Z+2, r1	; 0x02
     58c:	e1 e6       	ldi	r30, 0x61	; 97
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	80 e8       	ldi	r24, 0x80	; 128
     592:	80 83       	st	Z, r24
     594:	10 82       	st	Z, r1
     596:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     59a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <dispatch>:
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	00 d0       	rcall	.+0      	; 0x5be <dispatch+0x6>
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	9a 83       	std	Y+2, r25	; 0x02
     5c4:	89 83       	std	Y+1, r24	; 0x01
     5c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
     5ca:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
     5ce:	06 96       	adiw	r24, 0x06	; 6
     5d0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <setjmp>
     5d4:	89 2b       	or	r24, r25
     5d6:	59 f4       	brne	.+22     	; 0x5ee <dispatch+0x36>
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <current+0x1>
     5e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <current>
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	06 96       	adiw	r24, 0x06	; 6
     5ea:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <longjmp>
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <schedule>:
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <activeStack>
     604:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <activeStack+0x1>
     608:	aa 81       	ldd	r26, Y+2	; 0x02
     60a:	bb 81       	ldd	r27, Y+3	; 0x03
     60c:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <msgQ>
     610:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <msgQ+0x1>
     614:	30 97       	sbiw	r30, 0x00	; 0
     616:	31 f1       	breq	.+76     	; 0x664 <schedule+0x6c>
     618:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <threadPool>
     61c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threadPool+0x1>
     620:	00 97       	sbiw	r24, 0x00	; 0
     622:	01 f1       	breq	.+64     	; 0x664 <schedule+0x6c>
     624:	10 97       	sbiw	r26, 0x00	; 0
     626:	79 f0       	breq	.+30     	; 0x646 <schedule+0x4e>
     628:	46 81       	ldd	r20, Z+6	; 0x06
     62a:	57 81       	ldd	r21, Z+7	; 0x07
     62c:	60 85       	ldd	r22, Z+8	; 0x08
     62e:	71 85       	ldd	r23, Z+9	; 0x09
     630:	16 96       	adiw	r26, 0x06	; 6
     632:	0d 91       	ld	r16, X+
     634:	1d 91       	ld	r17, X+
     636:	2d 91       	ld	r18, X+
     638:	3c 91       	ld	r19, X
     63a:	19 97       	sbiw	r26, 0x09	; 9
     63c:	40 1b       	sub	r20, r16
     63e:	51 0b       	sbc	r21, r17
     640:	62 0b       	sbc	r22, r18
     642:	73 0b       	sbc	r23, r19
     644:	7a f4       	brpl	.+30     	; 0x664 <schedule+0x6c>
     646:	fc 01       	movw	r30, r24
     648:	20 81       	ld	r18, Z
     64a:	31 81       	ldd	r19, Z+1	; 0x01
     64c:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <threadPool+0x1>
     650:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <threadPool>
     654:	d1 83       	std	Z+1, r29	; 0x01
     656:	c0 83       	st	Z, r28
     658:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <activeStack+0x1>
     65c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <activeStack>
     660:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <dispatch>
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	08 95       	ret

0000066e <__vector_1>:
     66e:	1f 92       	push	r1
     670:	0f 92       	push	r0
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	0f 92       	push	r0
     676:	11 24       	eor	r1, r1
     678:	2f 93       	push	r18
     67a:	3f 93       	push	r19
     67c:	4f 93       	push	r20
     67e:	5f 93       	push	r21
     680:	6f 93       	push	r22
     682:	7f 93       	push	r23
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	af 93       	push	r26
     68a:	bf 93       	push	r27
     68c:	ef 93       	push	r30
     68e:	ff 93       	push	r31
     690:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     694:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     698:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     69c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     6a0:	c9 01       	movw	r24, r18
     6a2:	03 2e       	mov	r0, r19
     6a4:	00 0c       	add	r0, r0
     6a6:	aa 0b       	sbc	r26, r26
     6a8:	bb 0b       	sbc	r27, r27
     6aa:	dc 01       	movw	r26, r24
     6ac:	99 27       	eor	r25, r25
     6ae:	88 27       	eor	r24, r24
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	84 2b       	or	r24, r20
     6b6:	95 2b       	or	r25, r21
     6b8:	a6 2b       	or	r26, r22
     6ba:	b7 2b       	or	r27, r23
     6bc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     6c0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     6c4:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     6c8:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     6cc:	b0 9b       	sbis	0x16, 0	; 22
     6ce:	1b c0       	rjmp	.+54     	; 0x706 <__vector_1+0x98>
     6d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     6d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     6d8:	c9 01       	movw	r24, r18
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	09 2e       	mov	r0, r25
     6de:	00 0c       	add	r0, r0
     6e0:	aa 0b       	sbc	r26, r26
     6e2:	bb 0b       	sbc	r27, r27
     6e4:	dc 01       	movw	r26, r24
     6e6:	99 27       	eor	r25, r25
     6e8:	88 27       	eor	r24, r24
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	84 2b       	or	r24, r20
     6f0:	95 2b       	or	r25, r21
     6f2:	a6 2b       	or	r26, r22
     6f4:	b7 2b       	or	r27, r23
     6f6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     6fa:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     6fe:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     702:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     706:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable>
     70a:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x1>
     70e:	30 97       	sbiw	r30, 0x00	; 0
     710:	39 f0       	breq	.+14     	; 0x720 <__vector_1+0xb2>
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable>
     71a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x1>
     71e:	09 95       	icall
     720:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     724:	ff 91       	pop	r31
     726:	ef 91       	pop	r30
     728:	bf 91       	pop	r27
     72a:	af 91       	pop	r26
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	7f 91       	pop	r23
     732:	6f 91       	pop	r22
     734:	5f 91       	pop	r21
     736:	4f 91       	pop	r20
     738:	3f 91       	pop	r19
     73a:	2f 91       	pop	r18
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_2>:
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	af 93       	push	r26
     762:	bf 93       	push	r27
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
     768:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     76c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     770:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     774:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     778:	c9 01       	movw	r24, r18
     77a:	03 2e       	mov	r0, r19
     77c:	00 0c       	add	r0, r0
     77e:	aa 0b       	sbc	r26, r26
     780:	bb 0b       	sbc	r27, r27
     782:	dc 01       	movw	r26, r24
     784:	99 27       	eor	r25, r25
     786:	88 27       	eor	r24, r24
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	84 2b       	or	r24, r20
     78e:	95 2b       	or	r25, r21
     790:	a6 2b       	or	r26, r22
     792:	b7 2b       	or	r27, r23
     794:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     798:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     79c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     7a0:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     7a4:	b0 9b       	sbis	0x16, 0	; 22
     7a6:	1b c0       	rjmp	.+54     	; 0x7de <__vector_2+0x98>
     7a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     7ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7b0:	c9 01       	movw	r24, r18
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	09 2e       	mov	r0, r25
     7b6:	00 0c       	add	r0, r0
     7b8:	aa 0b       	sbc	r26, r26
     7ba:	bb 0b       	sbc	r27, r27
     7bc:	dc 01       	movw	r26, r24
     7be:	99 27       	eor	r25, r25
     7c0:	88 27       	eor	r24, r24
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	84 2b       	or	r24, r20
     7c8:	95 2b       	or	r25, r21
     7ca:	a6 2b       	or	r26, r22
     7cc:	b7 2b       	or	r27, r23
     7ce:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     7d2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     7d6:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     7da:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     7de:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x2>
     7e2:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x3>
     7e6:	30 97       	sbiw	r30, 0x00	; 0
     7e8:	39 f0       	breq	.+14     	; 0x7f8 <__vector_2+0xb2>
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x2>
     7f2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x3>
     7f6:	09 95       	icall
     7f8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <__vector_3>:
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	4f 93       	push	r20
     82e:	5f 93       	push	r21
     830:	6f 93       	push	r22
     832:	7f 93       	push	r23
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
     840:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     844:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     848:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     84c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     850:	c9 01       	movw	r24, r18
     852:	03 2e       	mov	r0, r19
     854:	00 0c       	add	r0, r0
     856:	aa 0b       	sbc	r26, r26
     858:	bb 0b       	sbc	r27, r27
     85a:	dc 01       	movw	r26, r24
     85c:	99 27       	eor	r25, r25
     85e:	88 27       	eor	r24, r24
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	84 2b       	or	r24, r20
     866:	95 2b       	or	r25, r21
     868:	a6 2b       	or	r26, r22
     86a:	b7 2b       	or	r27, r23
     86c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     870:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     874:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     878:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     87c:	b0 9b       	sbis	0x16, 0	; 22
     87e:	1b c0       	rjmp	.+54     	; 0x8b6 <__vector_3+0x98>
     880:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     884:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     888:	c9 01       	movw	r24, r18
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	09 2e       	mov	r0, r25
     88e:	00 0c       	add	r0, r0
     890:	aa 0b       	sbc	r26, r26
     892:	bb 0b       	sbc	r27, r27
     894:	dc 01       	movw	r26, r24
     896:	99 27       	eor	r25, r25
     898:	88 27       	eor	r24, r24
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	84 2b       	or	r24, r20
     8a0:	95 2b       	or	r25, r21
     8a2:	a6 2b       	or	r26, r22
     8a4:	b7 2b       	or	r27, r23
     8a6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     8aa:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     8ae:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     8b2:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     8b6:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x4>
     8ba:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x5>
     8be:	30 97       	sbiw	r30, 0x00	; 0
     8c0:	39 f0       	breq	.+14     	; 0x8d0 <__vector_3+0xb2>
     8c2:	62 e0       	ldi	r22, 0x02	; 2
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x4>
     8ca:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x5>
     8ce:	09 95       	icall
     8d0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <__vector_4>:
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
     918:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     91c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     920:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     924:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     928:	c9 01       	movw	r24, r18
     92a:	03 2e       	mov	r0, r19
     92c:	00 0c       	add	r0, r0
     92e:	aa 0b       	sbc	r26, r26
     930:	bb 0b       	sbc	r27, r27
     932:	dc 01       	movw	r26, r24
     934:	99 27       	eor	r25, r25
     936:	88 27       	eor	r24, r24
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	84 2b       	or	r24, r20
     93e:	95 2b       	or	r25, r21
     940:	a6 2b       	or	r26, r22
     942:	b7 2b       	or	r27, r23
     944:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     948:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     94c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     950:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     954:	b0 9b       	sbis	0x16, 0	; 22
     956:	1b c0       	rjmp	.+54     	; 0x98e <__vector_4+0x98>
     958:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     95c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     960:	c9 01       	movw	r24, r18
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	09 2e       	mov	r0, r25
     966:	00 0c       	add	r0, r0
     968:	aa 0b       	sbc	r26, r26
     96a:	bb 0b       	sbc	r27, r27
     96c:	dc 01       	movw	r26, r24
     96e:	99 27       	eor	r25, r25
     970:	88 27       	eor	r24, r24
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	84 2b       	or	r24, r20
     978:	95 2b       	or	r25, r21
     97a:	a6 2b       	or	r26, r22
     97c:	b7 2b       	or	r27, r23
     97e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     982:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     986:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     98a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     98e:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x6>
     992:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x7>
     996:	30 97       	sbiw	r30, 0x00	; 0
     998:	39 f0       	breq	.+14     	; 0x9a8 <__vector_4+0xb2>
     99a:	63 e0       	ldi	r22, 0x03	; 3
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x6>
     9a2:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x7>
     9a6:	09 95       	icall
     9a8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <__vector_5>:
     9ce:	1f 92       	push	r1
     9d0:	0f 92       	push	r0
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	0f 92       	push	r0
     9d6:	11 24       	eor	r1, r1
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	4f 93       	push	r20
     9de:	5f 93       	push	r21
     9e0:	6f 93       	push	r22
     9e2:	7f 93       	push	r23
     9e4:	8f 93       	push	r24
     9e6:	9f 93       	push	r25
     9e8:	af 93       	push	r26
     9ea:	bf 93       	push	r27
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
     9f0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     9f4:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     9f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a00:	c9 01       	movw	r24, r18
     a02:	03 2e       	mov	r0, r19
     a04:	00 0c       	add	r0, r0
     a06:	aa 0b       	sbc	r26, r26
     a08:	bb 0b       	sbc	r27, r27
     a0a:	dc 01       	movw	r26, r24
     a0c:	99 27       	eor	r25, r25
     a0e:	88 27       	eor	r24, r24
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	84 2b       	or	r24, r20
     a16:	95 2b       	or	r25, r21
     a18:	a6 2b       	or	r26, r22
     a1a:	b7 2b       	or	r27, r23
     a1c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     a20:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     a24:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     a28:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     a2c:	b0 9b       	sbis	0x16, 0	; 22
     a2e:	1b c0       	rjmp	.+54     	; 0xa66 <__vector_5+0x98>
     a30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a38:	c9 01       	movw	r24, r18
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	09 2e       	mov	r0, r25
     a3e:	00 0c       	add	r0, r0
     a40:	aa 0b       	sbc	r26, r26
     a42:	bb 0b       	sbc	r27, r27
     a44:	dc 01       	movw	r26, r24
     a46:	99 27       	eor	r25, r25
     a48:	88 27       	eor	r24, r24
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	84 2b       	or	r24, r20
     a50:	95 2b       	or	r25, r21
     a52:	a6 2b       	or	r26, r22
     a54:	b7 2b       	or	r27, r23
     a56:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     a5a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     a5e:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     a62:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     a66:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x8>
     a6a:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x9>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	39 f0       	breq	.+14     	; 0xa80 <__vector_5+0xb2>
     a72:	64 e0       	ldi	r22, 0x04	; 4
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x8>
     a7a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x9>
     a7e:	09 95       	icall
     a80:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_10>:
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	5f 93       	push	r21
     ab8:	6f 93       	push	r22
     aba:	7f 93       	push	r23
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
     ac0:	af 93       	push	r26
     ac2:	bf 93       	push	r27
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
     ac8:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     acc:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     ad0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ad4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ad8:	c9 01       	movw	r24, r18
     ada:	03 2e       	mov	r0, r19
     adc:	00 0c       	add	r0, r0
     ade:	aa 0b       	sbc	r26, r26
     ae0:	bb 0b       	sbc	r27, r27
     ae2:	dc 01       	movw	r26, r24
     ae4:	99 27       	eor	r25, r25
     ae6:	88 27       	eor	r24, r24
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	84 2b       	or	r24, r20
     aee:	95 2b       	or	r25, r21
     af0:	a6 2b       	or	r26, r22
     af2:	b7 2b       	or	r27, r23
     af4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     af8:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     afc:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     b00:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     b04:	b0 9b       	sbis	0x16, 0	; 22
     b06:	1b c0       	rjmp	.+54     	; 0xb3e <__vector_10+0x98>
     b08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b10:	c9 01       	movw	r24, r18
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	09 2e       	mov	r0, r25
     b16:	00 0c       	add	r0, r0
     b18:	aa 0b       	sbc	r26, r26
     b1a:	bb 0b       	sbc	r27, r27
     b1c:	dc 01       	movw	r26, r24
     b1e:	99 27       	eor	r25, r25
     b20:	88 27       	eor	r24, r24
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	84 2b       	or	r24, r20
     b28:	95 2b       	or	r25, r21
     b2a:	a6 2b       	or	r26, r22
     b2c:	b7 2b       	or	r27, r23
     b2e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     b32:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     b36:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     b3a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     b3e:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0xa>
     b42:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0xb>
     b46:	30 97       	sbiw	r30, 0x00	; 0
     b48:	39 f0       	breq	.+14     	; 0xb58 <__vector_10+0xb2>
     b4a:	65 e0       	ldi	r22, 0x05	; 5
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0xa>
     b52:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0xb>
     b56:	09 95       	icall
     b58:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     b5c:	ff 91       	pop	r31
     b5e:	ef 91       	pop	r30
     b60:	bf 91       	pop	r27
     b62:	af 91       	pop	r26
     b64:	9f 91       	pop	r25
     b66:	8f 91       	pop	r24
     b68:	7f 91       	pop	r23
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_11>:
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
     ba0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     ba4:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     ba8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bb0:	c9 01       	movw	r24, r18
     bb2:	03 2e       	mov	r0, r19
     bb4:	00 0c       	add	r0, r0
     bb6:	aa 0b       	sbc	r26, r26
     bb8:	bb 0b       	sbc	r27, r27
     bba:	dc 01       	movw	r26, r24
     bbc:	99 27       	eor	r25, r25
     bbe:	88 27       	eor	r24, r24
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	84 2b       	or	r24, r20
     bc6:	95 2b       	or	r25, r21
     bc8:	a6 2b       	or	r26, r22
     bca:	b7 2b       	or	r27, r23
     bcc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     bd0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     bd4:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     bd8:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     bdc:	b0 9b       	sbis	0x16, 0	; 22
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <__vector_11+0x98>
     be0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     be4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     be8:	c9 01       	movw	r24, r18
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	09 2e       	mov	r0, r25
     bee:	00 0c       	add	r0, r0
     bf0:	aa 0b       	sbc	r26, r26
     bf2:	bb 0b       	sbc	r27, r27
     bf4:	dc 01       	movw	r26, r24
     bf6:	99 27       	eor	r25, r25
     bf8:	88 27       	eor	r24, r24
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	84 2b       	or	r24, r20
     c00:	95 2b       	or	r25, r21
     c02:	a6 2b       	or	r26, r22
     c04:	b7 2b       	or	r27, r23
     c06:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     c0a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     c0e:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     c12:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     c16:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0xc>
     c1a:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0xd>
     c1e:	30 97       	sbiw	r30, 0x00	; 0
     c20:	39 f0       	breq	.+14     	; 0xc30 <__vector_11+0xb2>
     c22:	66 e0       	ldi	r22, 0x06	; 6
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0xc>
     c2a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0xd>
     c2e:	09 95       	icall
     c30:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	7f 91       	pop	r23
     c42:	6f 91       	pop	r22
     c44:	5f 91       	pop	r21
     c46:	4f 91       	pop	r20
     c48:	3f 91       	pop	r19
     c4a:	2f 91       	pop	r18
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	0f 90       	pop	r0
     c52:	1f 90       	pop	r1
     c54:	18 95       	reti

00000c56 <__vector_12>:
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	2f 93       	push	r18
     c62:	3f 93       	push	r19
     c64:	4f 93       	push	r20
     c66:	5f 93       	push	r21
     c68:	6f 93       	push	r22
     c6a:	7f 93       	push	r23
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	af 93       	push	r26
     c72:	bf 93       	push	r27
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
     c78:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     c7c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     c80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c88:	c9 01       	movw	r24, r18
     c8a:	03 2e       	mov	r0, r19
     c8c:	00 0c       	add	r0, r0
     c8e:	aa 0b       	sbc	r26, r26
     c90:	bb 0b       	sbc	r27, r27
     c92:	dc 01       	movw	r26, r24
     c94:	99 27       	eor	r25, r25
     c96:	88 27       	eor	r24, r24
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	84 2b       	or	r24, r20
     c9e:	95 2b       	or	r25, r21
     ca0:	a6 2b       	or	r26, r22
     ca2:	b7 2b       	or	r27, r23
     ca4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     ca8:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     cac:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     cb0:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     cb4:	b0 9b       	sbis	0x16, 0	; 22
     cb6:	1b c0       	rjmp	.+54     	; 0xcee <__vector_12+0x98>
     cb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     cbc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     cc0:	c9 01       	movw	r24, r18
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	09 2e       	mov	r0, r25
     cc6:	00 0c       	add	r0, r0
     cc8:	aa 0b       	sbc	r26, r26
     cca:	bb 0b       	sbc	r27, r27
     ccc:	dc 01       	movw	r26, r24
     cce:	99 27       	eor	r25, r25
     cd0:	88 27       	eor	r24, r24
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	84 2b       	or	r24, r20
     cd8:	95 2b       	or	r25, r21
     cda:	a6 2b       	or	r26, r22
     cdc:	b7 2b       	or	r27, r23
     cde:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     ce2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     ce6:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     cea:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     cee:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0xe>
     cf2:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0xf>
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	39 f0       	breq	.+14     	; 0xd08 <__vector_12+0xb2>
     cfa:	67 e0       	ldi	r22, 0x07	; 7
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0xe>
     d02:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0xf>
     d06:	09 95       	icall
     d08:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	bf 91       	pop	r27
     d12:	af 91       	pop	r26
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	7f 91       	pop	r23
     d1a:	6f 91       	pop	r22
     d1c:	5f 91       	pop	r21
     d1e:	4f 91       	pop	r20
     d20:	3f 91       	pop	r19
     d22:	2f 91       	pop	r18
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <__vector_13>:
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     d54:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     d58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d60:	c9 01       	movw	r24, r18
     d62:	03 2e       	mov	r0, r19
     d64:	00 0c       	add	r0, r0
     d66:	aa 0b       	sbc	r26, r26
     d68:	bb 0b       	sbc	r27, r27
     d6a:	dc 01       	movw	r26, r24
     d6c:	99 27       	eor	r25, r25
     d6e:	88 27       	eor	r24, r24
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	84 2b       	or	r24, r20
     d76:	95 2b       	or	r25, r21
     d78:	a6 2b       	or	r26, r22
     d7a:	b7 2b       	or	r27, r23
     d7c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     d80:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     d84:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     d88:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     d8c:	b0 9b       	sbis	0x16, 0	; 22
     d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <__vector_13+0x98>
     d90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     d94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d98:	c9 01       	movw	r24, r18
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	09 2e       	mov	r0, r25
     d9e:	00 0c       	add	r0, r0
     da0:	aa 0b       	sbc	r26, r26
     da2:	bb 0b       	sbc	r27, r27
     da4:	dc 01       	movw	r26, r24
     da6:	99 27       	eor	r25, r25
     da8:	88 27       	eor	r24, r24
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	84 2b       	or	r24, r20
     db0:	95 2b       	or	r25, r21
     db2:	a6 2b       	or	r26, r22
     db4:	b7 2b       	or	r27, r23
     db6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     dba:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     dbe:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     dc2:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     dc6:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x10>
     dca:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x11>
     dce:	30 97       	sbiw	r30, 0x00	; 0
     dd0:	39 f0       	breq	.+14     	; 0xde0 <__vector_13+0xb2>
     dd2:	68 e0       	ldi	r22, 0x08	; 8
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x10>
     dda:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x11>
     dde:	09 95       	icall
     de0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     de4:	ff 91       	pop	r31
     de6:	ef 91       	pop	r30
     de8:	bf 91       	pop	r27
     dea:	af 91       	pop	r26
     dec:	9f 91       	pop	r25
     dee:	8f 91       	pop	r24
     df0:	7f 91       	pop	r23
     df2:	6f 91       	pop	r22
     df4:	5f 91       	pop	r21
     df6:	4f 91       	pop	r20
     df8:	3f 91       	pop	r19
     dfa:	2f 91       	pop	r18
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_14>:
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	2f 93       	push	r18
     e12:	3f 93       	push	r19
     e14:	4f 93       	push	r20
     e16:	5f 93       	push	r21
     e18:	6f 93       	push	r22
     e1a:	7f 93       	push	r23
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
     e20:	af 93       	push	r26
     e22:	bf 93       	push	r27
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
     e28:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     e2c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     e30:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e34:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e38:	c9 01       	movw	r24, r18
     e3a:	03 2e       	mov	r0, r19
     e3c:	00 0c       	add	r0, r0
     e3e:	aa 0b       	sbc	r26, r26
     e40:	bb 0b       	sbc	r27, r27
     e42:	dc 01       	movw	r26, r24
     e44:	99 27       	eor	r25, r25
     e46:	88 27       	eor	r24, r24
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	84 2b       	or	r24, r20
     e4e:	95 2b       	or	r25, r21
     e50:	a6 2b       	or	r26, r22
     e52:	b7 2b       	or	r27, r23
     e54:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     e58:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     e5c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     e60:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     e64:	b0 9b       	sbis	0x16, 0	; 22
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <__vector_14+0x98>
     e68:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e6c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e70:	c9 01       	movw	r24, r18
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	09 2e       	mov	r0, r25
     e76:	00 0c       	add	r0, r0
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
     e7c:	dc 01       	movw	r26, r24
     e7e:	99 27       	eor	r25, r25
     e80:	88 27       	eor	r24, r24
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	84 2b       	or	r24, r20
     e88:	95 2b       	or	r25, r21
     e8a:	a6 2b       	or	r26, r22
     e8c:	b7 2b       	or	r27, r23
     e8e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     e92:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     e96:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     e9a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     e9e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x12>
     ea2:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x13>
     ea6:	30 97       	sbiw	r30, 0x00	; 0
     ea8:	39 f0       	breq	.+14     	; 0xeb8 <__vector_14+0xb2>
     eaa:	69 e0       	ldi	r22, 0x09	; 9
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x12>
     eb2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x13>
     eb6:	09 95       	icall
     eb8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <__vector_15>:
     ede:	1f 92       	push	r1
     ee0:	0f 92       	push	r0
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	0f 92       	push	r0
     ee6:	11 24       	eor	r1, r1
     ee8:	2f 93       	push	r18
     eea:	3f 93       	push	r19
     eec:	4f 93       	push	r20
     eee:	5f 93       	push	r21
     ef0:	6f 93       	push	r22
     ef2:	7f 93       	push	r23
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	ef 93       	push	r30
     efe:	ff 93       	push	r31
     f00:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     f04:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     f08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f10:	c9 01       	movw	r24, r18
     f12:	03 2e       	mov	r0, r19
     f14:	00 0c       	add	r0, r0
     f16:	aa 0b       	sbc	r26, r26
     f18:	bb 0b       	sbc	r27, r27
     f1a:	dc 01       	movw	r26, r24
     f1c:	99 27       	eor	r25, r25
     f1e:	88 27       	eor	r24, r24
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	84 2b       	or	r24, r20
     f26:	95 2b       	or	r25, r21
     f28:	a6 2b       	or	r26, r22
     f2a:	b7 2b       	or	r27, r23
     f2c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     f30:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     f34:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     f38:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     f3c:	b0 9b       	sbis	0x16, 0	; 22
     f3e:	1b c0       	rjmp	.+54     	; 0xf76 <__vector_15+0x98>
     f40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     f44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f48:	c9 01       	movw	r24, r18
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	09 2e       	mov	r0, r25
     f4e:	00 0c       	add	r0, r0
     f50:	aa 0b       	sbc	r26, r26
     f52:	bb 0b       	sbc	r27, r27
     f54:	dc 01       	movw	r26, r24
     f56:	99 27       	eor	r25, r25
     f58:	88 27       	eor	r24, r24
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	84 2b       	or	r24, r20
     f60:	95 2b       	or	r25, r21
     f62:	a6 2b       	or	r26, r22
     f64:	b7 2b       	or	r27, r23
     f66:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
     f6a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
     f6e:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
     f72:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
     f76:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x14>
     f7a:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x15>
     f7e:	30 97       	sbiw	r30, 0x00	; 0
     f80:	39 f0       	breq	.+14     	; 0xf90 <__vector_15+0xb2>
     f82:	6a e0       	ldi	r22, 0x0A	; 10
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x14>
     f8a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x15>
     f8e:	09 95       	icall
     f90:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_16>:
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	4f 93       	push	r20
     fc6:	5f 93       	push	r21
     fc8:	6f 93       	push	r22
     fca:	7f 93       	push	r23
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
     fd8:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
     fdc:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
     fe0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     fe4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fe8:	c9 01       	movw	r24, r18
     fea:	03 2e       	mov	r0, r19
     fec:	00 0c       	add	r0, r0
     fee:	aa 0b       	sbc	r26, r26
     ff0:	bb 0b       	sbc	r27, r27
     ff2:	dc 01       	movw	r26, r24
     ff4:	99 27       	eor	r25, r25
     ff6:	88 27       	eor	r24, r24
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	84 2b       	or	r24, r20
     ffe:	95 2b       	or	r25, r21
    1000:	a6 2b       	or	r26, r22
    1002:	b7 2b       	or	r27, r23
    1004:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    1008:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    100c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    1010:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    1014:	b0 9b       	sbis	0x16, 0	; 22
    1016:	1b c0       	rjmp	.+54     	; 0x104e <__vector_16+0x98>
    1018:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    101c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1020:	c9 01       	movw	r24, r18
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	09 2e       	mov	r0, r25
    1026:	00 0c       	add	r0, r0
    1028:	aa 0b       	sbc	r26, r26
    102a:	bb 0b       	sbc	r27, r27
    102c:	dc 01       	movw	r26, r24
    102e:	99 27       	eor	r25, r25
    1030:	88 27       	eor	r24, r24
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	84 2b       	or	r24, r20
    1038:	95 2b       	or	r25, r21
    103a:	a6 2b       	or	r26, r22
    103c:	b7 2b       	or	r27, r23
    103e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    1042:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    1046:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    104a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    104e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x16>
    1052:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x17>
    1056:	30 97       	sbiw	r30, 0x00	; 0
    1058:	39 f0       	breq	.+14     	; 0x1068 <__vector_16+0xb2>
    105a:	6b e0       	ldi	r22, 0x0B	; 11
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x16>
    1062:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x17>
    1066:	09 95       	icall
    1068:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_17>:
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
    10b0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    10b4:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    10b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    10bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10c0:	c9 01       	movw	r24, r18
    10c2:	03 2e       	mov	r0, r19
    10c4:	00 0c       	add	r0, r0
    10c6:	aa 0b       	sbc	r26, r26
    10c8:	bb 0b       	sbc	r27, r27
    10ca:	dc 01       	movw	r26, r24
    10cc:	99 27       	eor	r25, r25
    10ce:	88 27       	eor	r24, r24
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	84 2b       	or	r24, r20
    10d6:	95 2b       	or	r25, r21
    10d8:	a6 2b       	or	r26, r22
    10da:	b7 2b       	or	r27, r23
    10dc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    10e0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    10e4:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    10e8:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    10ec:	b0 9b       	sbis	0x16, 0	; 22
    10ee:	1b c0       	rjmp	.+54     	; 0x1126 <__vector_17+0x98>
    10f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    10f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    10f8:	c9 01       	movw	r24, r18
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	09 2e       	mov	r0, r25
    10fe:	00 0c       	add	r0, r0
    1100:	aa 0b       	sbc	r26, r26
    1102:	bb 0b       	sbc	r27, r27
    1104:	dc 01       	movw	r26, r24
    1106:	99 27       	eor	r25, r25
    1108:	88 27       	eor	r24, r24
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	84 2b       	or	r24, r20
    1110:	95 2b       	or	r25, r21
    1112:	a6 2b       	or	r26, r22
    1114:	b7 2b       	or	r27, r23
    1116:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    111a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    111e:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    1122:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    1126:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x18>
    112a:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x19>
    112e:	30 97       	sbiw	r30, 0x00	; 0
    1130:	39 f0       	breq	.+14     	; 0x1140 <__vector_17+0xb2>
    1132:	6c e0       	ldi	r22, 0x0C	; 12
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x18>
    113a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x19>
    113e:	09 95       	icall
    1140:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	bf 91       	pop	r27
    114a:	af 91       	pop	r26
    114c:	9f 91       	pop	r25
    114e:	8f 91       	pop	r24
    1150:	7f 91       	pop	r23
    1152:	6f 91       	pop	r22
    1154:	5f 91       	pop	r21
    1156:	4f 91       	pop	r20
    1158:	3f 91       	pop	r19
    115a:	2f 91       	pop	r18
    115c:	0f 90       	pop	r0
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	0f 90       	pop	r0
    1162:	1f 90       	pop	r1
    1164:	18 95       	reti

00001166 <__vector_18>:
    1166:	1f 92       	push	r1
    1168:	0f 92       	push	r0
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
    1188:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    118c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    1190:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1194:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1198:	c9 01       	movw	r24, r18
    119a:	03 2e       	mov	r0, r19
    119c:	00 0c       	add	r0, r0
    119e:	aa 0b       	sbc	r26, r26
    11a0:	bb 0b       	sbc	r27, r27
    11a2:	dc 01       	movw	r26, r24
    11a4:	99 27       	eor	r25, r25
    11a6:	88 27       	eor	r24, r24
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	84 2b       	or	r24, r20
    11ae:	95 2b       	or	r25, r21
    11b0:	a6 2b       	or	r26, r22
    11b2:	b7 2b       	or	r27, r23
    11b4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    11b8:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    11bc:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    11c0:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    11c4:	b0 9b       	sbis	0x16, 0	; 22
    11c6:	1b c0       	rjmp	.+54     	; 0x11fe <__vector_18+0x98>
    11c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    11cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11d0:	c9 01       	movw	r24, r18
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	09 2e       	mov	r0, r25
    11d6:	00 0c       	add	r0, r0
    11d8:	aa 0b       	sbc	r26, r26
    11da:	bb 0b       	sbc	r27, r27
    11dc:	dc 01       	movw	r26, r24
    11de:	99 27       	eor	r25, r25
    11e0:	88 27       	eor	r24, r24
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	84 2b       	or	r24, r20
    11e8:	95 2b       	or	r25, r21
    11ea:	a6 2b       	or	r26, r22
    11ec:	b7 2b       	or	r27, r23
    11ee:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    11f2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    11f6:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    11fa:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    11fe:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x1a>
    1202:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x1b>
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	39 f0       	breq	.+14     	; 0x1218 <__vector_18+0xb2>
    120a:	6d e0       	ldi	r22, 0x0D	; 13
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x1a>
    1212:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x1b>
    1216:	09 95       	icall
    1218:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <__vector_19>:
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	2f 93       	push	r18
    124a:	3f 93       	push	r19
    124c:	4f 93       	push	r20
    124e:	5f 93       	push	r21
    1250:	6f 93       	push	r22
    1252:	7f 93       	push	r23
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
    1258:	af 93       	push	r26
    125a:	bf 93       	push	r27
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
    1260:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    1264:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    1268:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    126c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1270:	c9 01       	movw	r24, r18
    1272:	03 2e       	mov	r0, r19
    1274:	00 0c       	add	r0, r0
    1276:	aa 0b       	sbc	r26, r26
    1278:	bb 0b       	sbc	r27, r27
    127a:	dc 01       	movw	r26, r24
    127c:	99 27       	eor	r25, r25
    127e:	88 27       	eor	r24, r24
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	84 2b       	or	r24, r20
    1286:	95 2b       	or	r25, r21
    1288:	a6 2b       	or	r26, r22
    128a:	b7 2b       	or	r27, r23
    128c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    1290:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    1294:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    1298:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    129c:	b0 9b       	sbis	0x16, 0	; 22
    129e:	1b c0       	rjmp	.+54     	; 0x12d6 <__vector_19+0x98>
    12a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    12a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    12a8:	c9 01       	movw	r24, r18
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	09 2e       	mov	r0, r25
    12ae:	00 0c       	add	r0, r0
    12b0:	aa 0b       	sbc	r26, r26
    12b2:	bb 0b       	sbc	r27, r27
    12b4:	dc 01       	movw	r26, r24
    12b6:	99 27       	eor	r25, r25
    12b8:	88 27       	eor	r24, r24
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	84 2b       	or	r24, r20
    12c0:	95 2b       	or	r25, r21
    12c2:	a6 2b       	or	r26, r22
    12c4:	b7 2b       	or	r27, r23
    12c6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    12ca:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    12ce:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    12d2:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    12d6:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x1c>
    12da:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x1d>
    12de:	30 97       	sbiw	r30, 0x00	; 0
    12e0:	39 f0       	breq	.+14     	; 0x12f0 <__vector_19+0xb2>
    12e2:	6e e0       	ldi	r22, 0x0E	; 14
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x1c>
    12ea:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x1d>
    12ee:	09 95       	icall
    12f0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_20>:
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    133c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    1340:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1344:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1348:	c9 01       	movw	r24, r18
    134a:	03 2e       	mov	r0, r19
    134c:	00 0c       	add	r0, r0
    134e:	aa 0b       	sbc	r26, r26
    1350:	bb 0b       	sbc	r27, r27
    1352:	dc 01       	movw	r26, r24
    1354:	99 27       	eor	r25, r25
    1356:	88 27       	eor	r24, r24
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	84 2b       	or	r24, r20
    135e:	95 2b       	or	r25, r21
    1360:	a6 2b       	or	r26, r22
    1362:	b7 2b       	or	r27, r23
    1364:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    1368:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    136c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    1370:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    1374:	b0 9b       	sbis	0x16, 0	; 22
    1376:	1b c0       	rjmp	.+54     	; 0x13ae <__vector_20+0x98>
    1378:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    137c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1380:	c9 01       	movw	r24, r18
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	09 2e       	mov	r0, r25
    1386:	00 0c       	add	r0, r0
    1388:	aa 0b       	sbc	r26, r26
    138a:	bb 0b       	sbc	r27, r27
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	84 2b       	or	r24, r20
    1398:	95 2b       	or	r25, r21
    139a:	a6 2b       	or	r26, r22
    139c:	b7 2b       	or	r27, r23
    139e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    13a2:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    13a6:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    13aa:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    13ae:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x1e>
    13b2:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x1f>
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	39 f0       	breq	.+14     	; 0x13c8 <__vector_20+0xb2>
    13ba:	6f e0       	ldi	r22, 0x0F	; 15
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x1e>
    13c2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x1f>
    13c6:	09 95       	icall
    13c8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_21>:
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    1414:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    1418:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    141c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1420:	c9 01       	movw	r24, r18
    1422:	03 2e       	mov	r0, r19
    1424:	00 0c       	add	r0, r0
    1426:	aa 0b       	sbc	r26, r26
    1428:	bb 0b       	sbc	r27, r27
    142a:	dc 01       	movw	r26, r24
    142c:	99 27       	eor	r25, r25
    142e:	88 27       	eor	r24, r24
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	84 2b       	or	r24, r20
    1436:	95 2b       	or	r25, r21
    1438:	a6 2b       	or	r26, r22
    143a:	b7 2b       	or	r27, r23
    143c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    1440:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    1444:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    1448:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    144c:	b0 9b       	sbis	0x16, 0	; 22
    144e:	1b c0       	rjmp	.+54     	; 0x1486 <__vector_21+0x98>
    1450:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1454:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1458:	c9 01       	movw	r24, r18
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	09 2e       	mov	r0, r25
    145e:	00 0c       	add	r0, r0
    1460:	aa 0b       	sbc	r26, r26
    1462:	bb 0b       	sbc	r27, r27
    1464:	dc 01       	movw	r26, r24
    1466:	99 27       	eor	r25, r25
    1468:	88 27       	eor	r24, r24
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	84 2b       	or	r24, r20
    1470:	95 2b       	or	r25, r21
    1472:	a6 2b       	or	r26, r22
    1474:	b7 2b       	or	r27, r23
    1476:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    147a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    147e:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    1482:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    1486:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x20>
    148a:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x21>
    148e:	30 97       	sbiw	r30, 0x00	; 0
    1490:	39 f0       	breq	.+14     	; 0x14a0 <__vector_21+0xb2>
    1492:	60 e1       	ldi	r22, 0x10	; 16
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x20>
    149a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x21>
    149e:	09 95       	icall
    14a0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    14a4:	ff 91       	pop	r31
    14a6:	ef 91       	pop	r30
    14a8:	bf 91       	pop	r27
    14aa:	af 91       	pop	r26
    14ac:	9f 91       	pop	r25
    14ae:	8f 91       	pop	r24
    14b0:	7f 91       	pop	r23
    14b2:	6f 91       	pop	r22
    14b4:	5f 91       	pop	r21
    14b6:	4f 91       	pop	r20
    14b8:	3f 91       	pop	r19
    14ba:	2f 91       	pop	r18
    14bc:	0f 90       	pop	r0
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	0f 90       	pop	r0
    14c2:	1f 90       	pop	r1
    14c4:	18 95       	reti

000014c6 <__vector_22>:
    14c6:	1f 92       	push	r1
    14c8:	0f 92       	push	r0
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	0f 92       	push	r0
    14ce:	11 24       	eor	r1, r1
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
    14e8:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    14ec:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    14f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    14f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    14f8:	c9 01       	movw	r24, r18
    14fa:	03 2e       	mov	r0, r19
    14fc:	00 0c       	add	r0, r0
    14fe:	aa 0b       	sbc	r26, r26
    1500:	bb 0b       	sbc	r27, r27
    1502:	dc 01       	movw	r26, r24
    1504:	99 27       	eor	r25, r25
    1506:	88 27       	eor	r24, r24
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	84 2b       	or	r24, r20
    150e:	95 2b       	or	r25, r21
    1510:	a6 2b       	or	r26, r22
    1512:	b7 2b       	or	r27, r23
    1514:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    1518:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    151c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    1520:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    1524:	b0 9b       	sbis	0x16, 0	; 22
    1526:	1b c0       	rjmp	.+54     	; 0x155e <__vector_22+0x98>
    1528:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    152c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1530:	c9 01       	movw	r24, r18
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	09 2e       	mov	r0, r25
    1536:	00 0c       	add	r0, r0
    1538:	aa 0b       	sbc	r26, r26
    153a:	bb 0b       	sbc	r27, r27
    153c:	dc 01       	movw	r26, r24
    153e:	99 27       	eor	r25, r25
    1540:	88 27       	eor	r24, r24
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	84 2b       	or	r24, r20
    1548:	95 2b       	or	r25, r21
    154a:	a6 2b       	or	r26, r22
    154c:	b7 2b       	or	r27, r23
    154e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <timestamp>
    1552:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <timestamp+0x1>
    1556:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <timestamp+0x2>
    155a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <timestamp+0x3>
    155e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x22>
    1562:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x23>
    1566:	30 97       	sbiw	r30, 0x00	; 0
    1568:	39 f0       	breq	.+14     	; 0x1578 <__vector_22+0xb2>
    156a:	61 e1       	ldi	r22, 0x11	; 17
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x22>
    1572:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x23>
    1576:	09 95       	icall
    1578:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	0f 90       	pop	r0
    159a:	1f 90       	pop	r1
    159c:	18 95       	reti

0000159e <enqueueByDeadline>:
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	7b 01       	movw	r14, r22
    15ac:	eb 01       	movw	r28, r22
    15ae:	a8 81       	ld	r26, Y
    15b0:	b9 81       	ldd	r27, Y+1	; 0x01
    15b2:	10 97       	sbiw	r26, 0x00	; 0
    15b4:	61 f1       	breq	.+88     	; 0x160e <enqueueByDeadline+0x70>
    15b6:	fc 01       	movw	r30, r24
    15b8:	06 81       	ldd	r16, Z+6	; 0x06
    15ba:	17 81       	ldd	r17, Z+7	; 0x07
    15bc:	20 85       	ldd	r18, Z+8	; 0x08
    15be:	31 85       	ldd	r19, Z+9	; 0x09
    15c0:	16 96       	adiw	r26, 0x06	; 6
    15c2:	4d 91       	ld	r20, X+
    15c4:	5d 91       	ld	r21, X+
    15c6:	6d 91       	ld	r22, X+
    15c8:	7c 91       	ld	r23, X
    15ca:	19 97       	sbiw	r26, 0x09	; 9
    15cc:	04 17       	cp	r16, r20
    15ce:	15 07       	cpc	r17, r21
    15d0:	26 07       	cpc	r18, r22
    15d2:	37 07       	cpc	r19, r23
    15d4:	14 f4       	brge	.+4      	; 0x15da <enqueueByDeadline+0x3c>
    15d6:	1b c0       	rjmp	.+54     	; 0x160e <enqueueByDeadline+0x70>
    15d8:	df 01       	movw	r26, r30
    15da:	ed 91       	ld	r30, X+
    15dc:	fc 91       	ld	r31, X
    15de:	11 97       	sbiw	r26, 0x01	; 1
    15e0:	30 97       	sbiw	r30, 0x00	; 0
    15e2:	49 f0       	breq	.+18     	; 0x15f6 <enqueueByDeadline+0x58>
    15e4:	46 81       	ldd	r20, Z+6	; 0x06
    15e6:	57 81       	ldd	r21, Z+7	; 0x07
    15e8:	60 85       	ldd	r22, Z+8	; 0x08
    15ea:	71 85       	ldd	r23, Z+9	; 0x09
    15ec:	04 17       	cp	r16, r20
    15ee:	15 07       	cpc	r17, r21
    15f0:	26 07       	cpc	r18, r22
    15f2:	37 07       	cpc	r19, r23
    15f4:	8c f7       	brge	.-30     	; 0x15d8 <enqueueByDeadline+0x3a>
    15f6:	ec 01       	movw	r28, r24
    15f8:	f9 83       	std	Y+1, r31	; 0x01
    15fa:	e8 83       	st	Y, r30
    15fc:	10 97       	sbiw	r26, 0x00	; 0
    15fe:	21 f4       	brne	.+8      	; 0x1608 <enqueueByDeadline+0x6a>
    1600:	f7 01       	movw	r30, r14
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <enqueueByDeadline+0x78>
    1608:	8d 93       	st	X+, r24
    160a:	9c 93       	st	X, r25
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <enqueueByDeadline+0x78>
    160e:	ec 01       	movw	r28, r24
    1610:	b9 83       	std	Y+1, r27	; 0x01
    1612:	a8 83       	st	Y, r26
    1614:	f5 cf       	rjmp	.-22     	; 0x1600 <enqueueByDeadline+0x62>
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	08 95       	ret

00001624 <enqueueByBaseline>:
    1624:	ef 92       	push	r14
    1626:	ff 92       	push	r15
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	7b 01       	movw	r14, r22
    1632:	eb 01       	movw	r28, r22
    1634:	a8 81       	ld	r26, Y
    1636:	b9 81       	ldd	r27, Y+1	; 0x01
    1638:	10 97       	sbiw	r26, 0x00	; 0
    163a:	61 f1       	breq	.+88     	; 0x1694 <enqueueByBaseline+0x70>
    163c:	fc 01       	movw	r30, r24
    163e:	02 81       	ldd	r16, Z+2	; 0x02
    1640:	13 81       	ldd	r17, Z+3	; 0x03
    1642:	24 81       	ldd	r18, Z+4	; 0x04
    1644:	35 81       	ldd	r19, Z+5	; 0x05
    1646:	12 96       	adiw	r26, 0x02	; 2
    1648:	4d 91       	ld	r20, X+
    164a:	5d 91       	ld	r21, X+
    164c:	6d 91       	ld	r22, X+
    164e:	7c 91       	ld	r23, X
    1650:	15 97       	sbiw	r26, 0x05	; 5
    1652:	04 17       	cp	r16, r20
    1654:	15 07       	cpc	r17, r21
    1656:	26 07       	cpc	r18, r22
    1658:	37 07       	cpc	r19, r23
    165a:	14 f4       	brge	.+4      	; 0x1660 <enqueueByBaseline+0x3c>
    165c:	1b c0       	rjmp	.+54     	; 0x1694 <enqueueByBaseline+0x70>
    165e:	df 01       	movw	r26, r30
    1660:	ed 91       	ld	r30, X+
    1662:	fc 91       	ld	r31, X
    1664:	11 97       	sbiw	r26, 0x01	; 1
    1666:	30 97       	sbiw	r30, 0x00	; 0
    1668:	49 f0       	breq	.+18     	; 0x167c <enqueueByBaseline+0x58>
    166a:	42 81       	ldd	r20, Z+2	; 0x02
    166c:	53 81       	ldd	r21, Z+3	; 0x03
    166e:	64 81       	ldd	r22, Z+4	; 0x04
    1670:	75 81       	ldd	r23, Z+5	; 0x05
    1672:	04 17       	cp	r16, r20
    1674:	15 07       	cpc	r17, r21
    1676:	26 07       	cpc	r18, r22
    1678:	37 07       	cpc	r19, r23
    167a:	8c f7       	brge	.-30     	; 0x165e <enqueueByBaseline+0x3a>
    167c:	ec 01       	movw	r28, r24
    167e:	f9 83       	std	Y+1, r31	; 0x01
    1680:	e8 83       	st	Y, r30
    1682:	10 97       	sbiw	r26, 0x00	; 0
    1684:	21 f4       	brne	.+8      	; 0x168e <enqueueByBaseline+0x6a>
    1686:	f7 01       	movw	r30, r14
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	07 c0       	rjmp	.+14     	; 0x169c <enqueueByBaseline+0x78>
    168e:	8d 93       	st	X+, r24
    1690:	9c 93       	st	X, r25
    1692:	04 c0       	rjmp	.+8      	; 0x169c <enqueueByBaseline+0x78>
    1694:	ec 01       	movw	r28, r24
    1696:	b9 83       	std	Y+1, r27	; 0x01
    1698:	a8 83       	st	Y, r26
    169a:	f5 cf       	rjmp	.-22     	; 0x1686 <enqueueByBaseline+0x62>
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	08 95       	ret

000016aa <dequeue>:
    16aa:	dc 01       	movw	r26, r24
    16ac:	ed 91       	ld	r30, X+
    16ae:	fc 91       	ld	r31, X
    16b0:	11 97       	sbiw	r26, 0x01	; 1
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	59 f4       	brne	.+22     	; 0x16cc <dequeue+0x22>
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    16bc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    16c0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	83 bf       	out	0x33, r24	; 51
    16c8:	88 95       	sleep
    16ca:	fd cf       	rjmp	.-6      	; 0x16c6 <dequeue+0x1c>
    16cc:	20 81       	ld	r18, Z
    16ce:	31 81       	ldd	r19, Z+1	; 0x01
    16d0:	2d 93       	st	X+, r18
    16d2:	3c 93       	st	X, r19
    16d4:	cf 01       	movw	r24, r30
    16d6:	08 95       	ret

000016d8 <__vector_9>:
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    16f6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <overflows>
    16fa:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <overflows+0x1>
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <overflows+0x1>
    1704:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <overflows>
    1708:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <timerQ>
    170c:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <timerQ+0x1>
    1710:	30 97       	sbiw	r30, 0x00	; 0
    1712:	01 f1       	breq	.+64     	; 0x1754 <__vector_9+0x7c>
    1714:	42 81       	ldd	r20, Z+2	; 0x02
    1716:	53 81       	ldd	r21, Z+3	; 0x03
    1718:	64 81       	ldd	r22, Z+4	; 0x04
    171a:	75 81       	ldd	r23, Z+5	; 0x05
    171c:	86 17       	cp	r24, r22
    171e:	97 07       	cpc	r25, r23
    1720:	c9 f4       	brne	.+50     	; 0x1754 <__vector_9+0x7c>
    1722:	ca 01       	movw	r24, r20
    1724:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1728:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    172c:	42 1b       	sub	r20, r18
    172e:	53 0b       	sbc	r21, r19
    1730:	41 30       	cpi	r20, 0x01	; 1
    1732:	51 05       	cpc	r21, r1
    1734:	29 f4       	brne	.+10     	; 0x1740 <__vector_9+0x68>
    1736:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    173a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1744:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1748:	ef e6       	ldi	r30, 0x6F	; 111
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	82 60       	ori	r24, 0x02	; 2
    1750:	80 83       	st	Z, r24
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__vector_9+0x86>
    1754:	ef e6       	ldi	r30, 0x6F	; 111
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8d 7f       	andi	r24, 0xFD	; 253
    175c:	80 83       	st	Z, r24
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_7>:
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	cf 92       	push	r12
    1788:	df 92       	push	r13
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
    17a6:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <overflows>
    17aa:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <overflows+0x1>
    17ae:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    17b2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    17b6:	b0 99       	sbic	0x16, 0	; 22
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <__vector_7+0x5c>
    17ba:	0d 2c       	mov	r0, r13
    17bc:	00 0c       	add	r0, r0
    17be:	ee 08       	sbc	r14, r14
    17c0:	ff 08       	sbc	r15, r15
    17c2:	d6 01       	movw	r26, r12
    17c4:	99 27       	eor	r25, r25
    17c6:	88 27       	eor	r24, r24
    17c8:	69 01       	movw	r12, r18
    17ca:	e1 2c       	mov	r14, r1
    17cc:	f1 2c       	mov	r15, r1
    17ce:	c8 2a       	or	r12, r24
    17d0:	d9 2a       	or	r13, r25
    17d2:	ea 2a       	or	r14, r26
    17d4:	fb 2a       	or	r15, r27
    17d6:	15 c0       	rjmp	.+42     	; 0x1802 <__vector_7+0x86>
    17d8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    17dc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	c8 1a       	sub	r12, r24
    17e4:	d8 0a       	sbc	r13, r24
    17e6:	0d 2c       	mov	r0, r13
    17e8:	00 0c       	add	r0, r0
    17ea:	ee 08       	sbc	r14, r14
    17ec:	ff 08       	sbc	r15, r15
    17ee:	d6 01       	movw	r26, r12
    17f0:	99 27       	eor	r25, r25
    17f2:	88 27       	eor	r24, r24
    17f4:	69 01       	movw	r12, r18
    17f6:	e1 2c       	mov	r14, r1
    17f8:	f1 2c       	mov	r15, r1
    17fa:	c8 2a       	or	r12, r24
    17fc:	d9 2a       	or	r13, r25
    17fe:	ea 2a       	or	r14, r26
    1800:	fb 2a       	or	r15, r27
    1802:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <timerQ>
    1806:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <timerQ+0x1>
    180a:	30 97       	sbiw	r30, 0x00	; 0
    180c:	09 f4       	brne	.+2      	; 0x1810 <__vector_7+0x94>
    180e:	42 c0       	rjmp	.+132    	; 0x1894 <__vector_7+0x118>
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	a4 81       	ldd	r26, Z+4	; 0x04
    1816:	b5 81       	ldd	r27, Z+5	; 0x05
    1818:	8c 19       	sub	r24, r12
    181a:	9d 09       	sbc	r25, r13
    181c:	ae 09       	sbc	r26, r14
    181e:	bf 09       	sbc	r27, r15
    1820:	18 16       	cp	r1, r24
    1822:	19 06       	cpc	r1, r25
    1824:	1a 06       	cpc	r1, r26
    1826:	1b 06       	cpc	r1, r27
    1828:	ec f1       	brlt	.+122    	; 0x18a4 <__vector_7+0x128>
    182a:	82 e3       	ldi	r24, 0x32	; 50
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <dequeue>
    1832:	64 e3       	ldi	r22, 0x34	; 52
    1834:	71 e0       	ldi	r23, 0x01	; 1
    1836:	0e 94 cf 0a 	call	0x159e	; 0x159e <enqueueByDeadline>
    183a:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <timerQ>
    183e:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <timerQ+0x1>
    1842:	30 97       	sbiw	r30, 0x00	; 0
    1844:	39 f1       	breq	.+78     	; 0x1894 <__vector_7+0x118>
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	a4 81       	ldd	r26, Z+4	; 0x04
    184c:	b5 81       	ldd	r27, Z+5	; 0x05
    184e:	8c 19       	sub	r24, r12
    1850:	9d 09       	sbc	r25, r13
    1852:	ae 09       	sbc	r26, r14
    1854:	bf 09       	sbc	r27, r15
    1856:	18 16       	cp	r1, r24
    1858:	19 06       	cpc	r1, r25
    185a:	1a 06       	cpc	r1, r26
    185c:	1b 06       	cpc	r1, r27
    185e:	2c f7       	brge	.-54     	; 0x182a <__vector_7+0xae>
    1860:	21 c0       	rjmp	.+66     	; 0x18a4 <__vector_7+0x128>
    1862:	9c 01       	movw	r18, r24
    1864:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1868:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    186c:	84 1b       	sub	r24, r20
    186e:	95 0b       	sbc	r25, r21
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	31 f4       	brne	.+12     	; 0x1880 <__vector_7+0x104>
    1874:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1878:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1884:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1888:	ef e6       	ldi	r30, 0x6F	; 111
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	82 60       	ori	r24, 0x02	; 2
    1890:	80 83       	st	Z, r24
    1892:	05 c0       	rjmp	.+10     	; 0x189e <__vector_7+0x122>
    1894:	ef e6       	ldi	r30, 0x6F	; 111
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8d 7f       	andi	r24, 0xFD	; 253
    189c:	80 83       	st	Z, r24
    189e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    18a2:	0c c0       	rjmp	.+24     	; 0x18bc <__vector_7+0x140>
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	a4 81       	ldd	r26, Z+4	; 0x04
    18aa:	b5 81       	ldd	r27, Z+5	; 0x05
    18ac:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    18b0:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    18b4:	2a 17       	cp	r18, r26
    18b6:	3b 07       	cpc	r19, r27
    18b8:	69 f7       	brne	.-38     	; 0x1894 <__vector_7+0x118>
    18ba:	d3 cf       	rjmp	.-90     	; 0x1862 <__vector_7+0xe6>
    18bc:	ff 91       	pop	r31
    18be:	ef 91       	pop	r30
    18c0:	bf 91       	pop	r27
    18c2:	af 91       	pop	r26
    18c4:	9f 91       	pop	r25
    18c6:	8f 91       	pop	r24
    18c8:	7f 91       	pop	r23
    18ca:	6f 91       	pop	r22
    18cc:	5f 91       	pop	r21
    18ce:	4f 91       	pop	r20
    18d0:	3f 91       	pop	r19
    18d2:	2f 91       	pop	r18
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	0f 90       	pop	r0
    18e2:	1f 90       	pop	r1
    18e4:	18 95       	reti

000018e6 <async>:
    18e6:	3f 92       	push	r3
    18e8:	4f 92       	push	r4
    18ea:	5f 92       	push	r5
    18ec:	6f 92       	push	r6
    18ee:	7f 92       	push	r7
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	2b 01       	movw	r4, r22
    190a:	3c 01       	movw	r6, r24
    190c:	49 01       	movw	r8, r18
    190e:	5a 01       	movw	r10, r20
    1910:	8f b7       	in	r24, 0x3f	; 63
    1912:	80 78       	andi	r24, 0x80	; 128
    1914:	38 2e       	mov	r3, r24
    1916:	f8 94       	cli
    1918:	8c e0       	ldi	r24, 0x0C	; 12
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <dequeue>
    1920:	ec 01       	movw	r28, r24
    1922:	1b 87       	std	Y+11, r17	; 0x0b
    1924:	0a 87       	std	Y+10, r16	; 0x0a
    1926:	fd 86       	std	Y+13, r15	; 0x0d
    1928:	ec 86       	std	Y+12, r14	; 0x0c
    192a:	df 86       	std	Y+15, r13	; 0x0f
    192c:	ce 86       	std	Y+14, r12	; 0x0e
    192e:	33 20       	and	r3, r3
    1930:	61 f0       	breq	.+24     	; 0x194a <async+0x64>
    1932:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <current>
    1936:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <current+0x1>
    193a:	02 80       	ldd	r0, Z+2	; 0x02
    193c:	f3 81       	ldd	r31, Z+3	; 0x03
    193e:	e0 2d       	mov	r30, r0
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	a4 81       	ldd	r26, Z+4	; 0x04
    1946:	b5 81       	ldd	r27, Z+5	; 0x05
    1948:	08 c0       	rjmp	.+16     	; 0x195a <async+0x74>
    194a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <timestamp>
    194e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <timestamp+0x1>
    1952:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <timestamp+0x2>
    1956:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <timestamp+0x3>
    195a:	48 0e       	add	r4, r24
    195c:	59 1e       	adc	r5, r25
    195e:	6a 1e       	adc	r6, r26
    1960:	7b 1e       	adc	r7, r27
    1962:	4a 82       	std	Y+2, r4	; 0x02
    1964:	5b 82       	std	Y+3, r5	; 0x03
    1966:	6c 82       	std	Y+4, r6	; 0x04
    1968:	7d 82       	std	Y+5, r7	; 0x05
    196a:	18 14       	cp	r1, r8
    196c:	19 04       	cpc	r1, r9
    196e:	1a 04       	cpc	r1, r10
    1970:	1b 04       	cpc	r1, r11
    1972:	44 f0       	brlt	.+16     	; 0x1984 <async+0x9e>
    1974:	0f 2e       	mov	r0, r31
    1976:	88 24       	eor	r8, r8
    1978:	8a 94       	dec	r8
    197a:	98 2c       	mov	r9, r8
    197c:	a8 2c       	mov	r10, r8
    197e:	ff e7       	ldi	r31, 0x7F	; 127
    1980:	bf 2e       	mov	r11, r31
    1982:	f0 2d       	mov	r31, r0
    1984:	84 0c       	add	r8, r4
    1986:	95 1c       	adc	r9, r5
    1988:	a6 1c       	adc	r10, r6
    198a:	b7 1c       	adc	r11, r7
    198c:	8e 82       	std	Y+6, r8	; 0x06
    198e:	9f 82       	std	Y+7, r9	; 0x07
    1990:	a8 86       	std	Y+8, r10	; 0x08
    1992:	b9 86       	std	Y+9, r11	; 0x09
    1994:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <overflows>
    1998:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <overflows+0x1>
    199c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19a4:	b0 99       	sbic	0x16, 0	; 22
    19a6:	0e c0       	rjmp	.+28     	; 0x19c4 <async+0xde>
    19a8:	09 2e       	mov	r0, r25
    19aa:	00 0c       	add	r0, r0
    19ac:	aa 0b       	sbc	r26, r26
    19ae:	bb 0b       	sbc	r27, r27
    19b0:	dc 01       	movw	r26, r24
    19b2:	99 27       	eor	r25, r25
    19b4:	88 27       	eor	r24, r24
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	84 2b       	or	r24, r20
    19bc:	95 2b       	or	r25, r21
    19be:	a6 2b       	or	r26, r22
    19c0:	b7 2b       	or	r27, r23
    19c2:	13 c0       	rjmp	.+38     	; 0x19ea <async+0x104>
    19c4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    19c8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	09 2e       	mov	r0, r25
    19d0:	00 0c       	add	r0, r0
    19d2:	aa 0b       	sbc	r26, r26
    19d4:	bb 0b       	sbc	r27, r27
    19d6:	dc 01       	movw	r26, r24
    19d8:	99 27       	eor	r25, r25
    19da:	88 27       	eor	r24, r24
    19dc:	a9 01       	movw	r20, r18
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	84 2b       	or	r24, r20
    19e4:	95 2b       	or	r25, r21
    19e6:	a6 2b       	or	r26, r22
    19e8:	b7 2b       	or	r27, r23
    19ea:	48 1a       	sub	r4, r24
    19ec:	59 0a       	sbc	r5, r25
    19ee:	6a 0a       	sbc	r6, r26
    19f0:	7b 0a       	sbc	r7, r27
    19f2:	14 14       	cp	r1, r4
    19f4:	15 04       	cpc	r1, r5
    19f6:	16 04       	cpc	r1, r6
    19f8:	17 04       	cpc	r1, r7
    19fa:	ac f5       	brge	.+106    	; 0x1a66 <async+0x180>
    19fc:	62 e3       	ldi	r22, 0x32	; 50
    19fe:	71 e0       	ldi	r23, 0x01	; 1
    1a00:	ce 01       	movw	r24, r28
    1a02:	0e 94 12 0b 	call	0x1624	; 0x1624 <enqueueByBaseline>
    1a06:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <timerQ>
    1a0a:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <timerQ+0x1>
    1a0e:	30 97       	sbiw	r30, 0x00	; 0
    1a10:	21 f1       	breq	.+72     	; 0x1a5a <async+0x174>
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	a4 81       	ldd	r26, Z+4	; 0x04
    1a18:	b5 81       	ldd	r27, Z+5	; 0x05
    1a1a:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <overflows>
    1a1e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <overflows+0x1>
    1a22:	2a 17       	cp	r18, r26
    1a24:	3b 07       	cpc	r19, r27
    1a26:	c9 f4       	brne	.+50     	; 0x1a5a <async+0x174>
    1a28:	9c 01       	movw	r18, r24
    1a2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a32:	84 1b       	sub	r24, r20
    1a34:	95 0b       	sbc	r25, r21
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	31 f4       	brne	.+12     	; 0x1a46 <async+0x160>
    1a3a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1a3e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1a42:	2f 5f       	subi	r18, 0xFF	; 255
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a4a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a4e:	ef e6       	ldi	r30, 0x6F	; 111
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	82 60       	ori	r24, 0x02	; 2
    1a56:	80 83       	st	Z, r24
    1a58:	41 c0       	rjmp	.+130    	; 0x1adc <async+0x1f6>
    1a5a:	ef e6       	ldi	r30, 0x6F	; 111
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	8d 7f       	andi	r24, 0xFD	; 253
    1a62:	80 83       	st	Z, r24
    1a64:	3b c0       	rjmp	.+118    	; 0x1adc <async+0x1f6>
    1a66:	64 e3       	ldi	r22, 0x34	; 52
    1a68:	71 e0       	ldi	r23, 0x01	; 1
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	0e 94 cf 0a 	call	0x159e	; 0x159e <enqueueByDeadline>
    1a70:	33 20       	and	r3, r3
    1a72:	b9 f1       	breq	.+110    	; 0x1ae2 <async+0x1fc>
    1a74:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <threadPool>
    1a78:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threadPool+0x1>
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	81 f1       	breq	.+96     	; 0x1ae0 <async+0x1fa>
    1a80:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <activeStack>
    1a84:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <activeStack+0x1>
    1a88:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <msgQ>
    1a8c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <msgQ+0x1>
    1a90:	02 81       	ldd	r16, Z+2	; 0x02
    1a92:	13 81       	ldd	r17, Z+3	; 0x03
    1a94:	d9 01       	movw	r26, r18
    1a96:	16 96       	adiw	r26, 0x06	; 6
    1a98:	4d 91       	ld	r20, X+
    1a9a:	5d 91       	ld	r21, X+
    1a9c:	6d 91       	ld	r22, X+
    1a9e:	7c 91       	ld	r23, X
    1aa0:	19 97       	sbiw	r26, 0x09	; 9
    1aa2:	d8 01       	movw	r26, r16
    1aa4:	16 96       	adiw	r26, 0x06	; 6
    1aa6:	0d 91       	ld	r16, X+
    1aa8:	1d 91       	ld	r17, X+
    1aaa:	2d 91       	ld	r18, X+
    1aac:	3c 91       	ld	r19, X
    1aae:	19 97       	sbiw	r26, 0x09	; 9
    1ab0:	40 1b       	sub	r20, r16
    1ab2:	51 0b       	sbc	r21, r17
    1ab4:	62 0b       	sbc	r22, r18
    1ab6:	73 0b       	sbc	r23, r19
    1ab8:	9a f4       	brpl	.+38     	; 0x1ae0 <async+0x1fa>
    1aba:	dc 01       	movw	r26, r24
    1abc:	2d 91       	ld	r18, X+
    1abe:	3c 91       	ld	r19, X
    1ac0:	11 97       	sbiw	r26, 0x01	; 1
    1ac2:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <threadPool+0x1>
    1ac6:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <threadPool>
    1aca:	ed 93       	st	X+, r30
    1acc:	fc 93       	st	X, r31
    1ace:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <activeStack+0x1>
    1ad2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <activeStack>
    1ad6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <dispatch>
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <async+0x1fa>
    1adc:	33 20       	and	r3, r3
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <async+0x1fc>
    1ae0:	78 94       	sei
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	bf 90       	pop	r11
    1af6:	af 90       	pop	r10
    1af8:	9f 90       	pop	r9
    1afa:	8f 90       	pop	r8
    1afc:	7f 90       	pop	r7
    1afe:	6f 90       	pop	r6
    1b00:	5f 90       	pop	r5
    1b02:	4f 90       	pop	r4
    1b04:	3f 90       	pop	r3
    1b06:	08 95       	ret

00001b08 <sync>:
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	8c 01       	movw	r16, r24
    1b1c:	6b 01       	movw	r12, r22
    1b1e:	5a 01       	movw	r10, r20
    1b20:	8f b7       	in	r24, 0x3f	; 63
    1b22:	80 78       	andi	r24, 0x80	; 128
    1b24:	f8 2e       	mov	r15, r24
    1b26:	f8 94       	cli
    1b28:	d8 01       	movw	r26, r16
    1b2a:	cd 91       	ld	r28, X+
    1b2c:	dc 91       	ld	r29, X
    1b2e:	20 97       	sbiw	r28, 0x00	; 0
    1b30:	71 f1       	breq	.+92     	; 0x1b8e <sync+0x86>
    1b32:	ac 81       	ldd	r26, Y+4	; 0x04
    1b34:	bd 81       	ldd	r27, Y+5	; 0x05
    1b36:	10 97       	sbiw	r26, 0x00	; 0
    1b38:	31 f0       	breq	.+12     	; 0x1b46 <sync+0x3e>
    1b3a:	cd 91       	ld	r28, X+
    1b3c:	dc 91       	ld	r29, X
    1b3e:	ac 81       	ldd	r26, Y+4	; 0x04
    1b40:	bd 81       	ldd	r27, Y+5	; 0x05
    1b42:	10 97       	sbiw	r26, 0x00	; 0
    1b44:	d1 f7       	brne	.-12     	; 0x1b3a <sync+0x32>
    1b46:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <current>
    1b4a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <current+0x1>
    1b4e:	ce 17       	cp	r28, r30
    1b50:	df 07       	cpc	r29, r31
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <sync+0x54>
    1b54:	ff 20       	and	r15, r15
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <sync+0x52>
    1b58:	4d c0       	rjmp	.+154    	; 0x1bf4 <sync+0xec>
    1b5a:	07 c0       	rjmp	.+14     	; 0x1b6a <sync+0x62>
    1b5c:	ff 20       	and	r15, r15
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <sync+0x5a>
    1b60:	4c c0       	rjmp	.+152    	; 0x1bfa <sync+0xf2>
    1b62:	78 94       	sei
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	9f ef       	ldi	r25, 0xFF	; 255
    1b68:	66 c0       	rjmp	.+204    	; 0x1c36 <sync+0x12e>
    1b6a:	d8 01       	movw	r26, r16
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	8d 91       	ld	r24, X+
    1b70:	9c 91       	ld	r25, X
    1b72:	13 97       	sbiw	r26, 0x03	; 3
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <sync+0x72>
    1b78:	46 c0       	rjmp	.+140    	; 0x1c06 <sync+0xfe>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	15 96       	adiw	r26, 0x05	; 5
    1b7e:	1c 92       	st	X, r1
    1b80:	1e 92       	st	-X, r1
    1b82:	14 97       	sbiw	r26, 0x04	; 4
    1b84:	40 c0       	rjmp	.+128    	; 0x1c06 <sync+0xfe>
    1b86:	78 94       	sei
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	54 c0       	rjmp	.+168    	; 0x1c36 <sync+0x12e>
    1b8e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <current>
    1b92:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <current+0x1>
    1b96:	f8 01       	movw	r30, r16
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
    1b9c:	ff 20       	and	r15, r15
    1b9e:	41 f0       	breq	.+16     	; 0x1bb0 <sync+0xa8>
    1ba0:	d8 01       	movw	r26, r16
    1ba2:	12 96       	adiw	r26, 0x02	; 2
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	13 97       	sbiw	r26, 0x03	; 3
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <sync+0xa8>
    1bae:	78 94       	sei
    1bb0:	b5 01       	movw	r22, r10
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	f6 01       	movw	r30, r12
    1bb6:	09 95       	icall
    1bb8:	d8 2f       	mov	r29, r24
    1bba:	c9 2f       	mov	r28, r25
    1bbc:	8f b7       	in	r24, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	d8 01       	movw	r26, r16
    1bc2:	11 96       	adiw	r26, 0x01	; 1
    1bc4:	1c 92       	st	X, r1
    1bc6:	1e 92       	st	-X, r1
    1bc8:	12 96       	adiw	r26, 0x02	; 2
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	13 97       	sbiw	r26, 0x03	; 3
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	48 f0       	brcs	.+18     	; 0x1be8 <sync+0xe0>
    1bd6:	13 96       	adiw	r26, 0x03	; 3
    1bd8:	1c 92       	st	X, r1
    1bda:	1e 92       	st	-X, r1
    1bdc:	12 97       	sbiw	r26, 0x02	; 2
    1bde:	fc 01       	movw	r30, r24
    1be0:	15 82       	std	Z+5, r1	; 0x05
    1be2:	14 82       	std	Z+4, r1	; 0x04
    1be4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <dispatch>
    1be8:	ff 20       	and	r15, r15
    1bea:	51 f0       	breq	.+20     	; 0x1c00 <sync+0xf8>
    1bec:	78 94       	sei
    1bee:	8d 2f       	mov	r24, r29
    1bf0:	9c 2f       	mov	r25, r28
    1bf2:	21 c0       	rjmp	.+66     	; 0x1c36 <sync+0x12e>
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	9f ef       	ldi	r25, 0xFF	; 255
    1bf8:	1e c0       	rjmp	.+60     	; 0x1c36 <sync+0x12e>
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	1b c0       	rjmp	.+54     	; 0x1c36 <sync+0x12e>
    1c00:	8d 2f       	mov	r24, r29
    1c02:	9c 2f       	mov	r25, r28
    1c04:	18 c0       	rjmp	.+48     	; 0x1c36 <sync+0x12e>
    1c06:	d8 01       	movw	r26, r16
    1c08:	13 96       	adiw	r26, 0x03	; 3
    1c0a:	fc 93       	st	X, r31
    1c0c:	ee 93       	st	-X, r30
    1c0e:	12 97       	sbiw	r26, 0x02	; 2
    1c10:	15 83       	std	Z+5, r17	; 0x05
    1c12:	04 83       	std	Z+4, r16	; 0x04
    1c14:	ce 01       	movw	r24, r28
    1c16:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <dispatch>
    1c1a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <current>
    1c1e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <current+0x1>
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	89 2b       	or	r24, r25
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <sync+0x124>
    1c2a:	ad cf       	rjmp	.-166    	; 0x1b86 <sync+0x7e>
    1c2c:	cf 01       	movw	r24, r30
    1c2e:	f8 01       	movw	r30, r16
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	b5 cf       	rjmp	.-150    	; 0x1ba0 <sync+0x98>
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	ff 90       	pop	r15
    1c40:	df 90       	pop	r13
    1c42:	cf 90       	pop	r12
    1c44:	bf 90       	pop	r11
    1c46:	af 90       	pop	r10
    1c48:	08 95       	ret

00001c4a <run>:
    1c4a:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <current>
    1c4e:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <current+0x1>
    1c52:	84 e3       	ldi	r24, 0x34	; 52
    1c54:	91 e0       	ldi	r25, 0x01	; 1
    1c56:	0e 94 55 0b 	call	0x16aa	; 0x16aa <dequeue>
    1c5a:	ec 01       	movw	r28, r24
    1c5c:	d8 01       	movw	r26, r16
    1c5e:	13 96       	adiw	r26, 0x03	; 3
    1c60:	9c 93       	st	X, r25
    1c62:	8e 93       	st	-X, r24
    1c64:	12 97       	sbiw	r26, 0x02	; 2
    1c66:	78 94       	sei
    1c68:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c6a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c74:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <sync>
    1c78:	8f b7       	in	r24, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msgPool>
    1c80:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msgPool+0x1>
    1c84:	99 83       	std	Y+1, r25	; 0x01
    1c86:	88 83       	st	Y, r24
    1c88:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <msgPool+0x1>
    1c8c:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <msgPool>
    1c90:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <activeStack>
    1c94:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <activeStack+0x1>
    1c98:	00 81       	ld	r16, Z
    1c9a:	11 81       	ldd	r17, Z+1	; 0x01
    1c9c:	e8 01       	movw	r28, r16
    1c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ca2:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <msgQ>
    1ca6:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <msgQ+0x1>
    1caa:	10 97       	sbiw	r26, 0x00	; 0
    1cac:	c1 f0       	breq	.+48     	; 0x1cde <run+0x94>
    1cae:	21 15       	cp	r18, r1
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	59 f2       	breq	.-106    	; 0x1c4a <run>
    1cb4:	16 96       	adiw	r26, 0x06	; 6
    1cb6:	8d 91       	ld	r24, X+
    1cb8:	9d 91       	ld	r25, X+
    1cba:	0d 90       	ld	r0, X+
    1cbc:	bc 91       	ld	r27, X
    1cbe:	a0 2d       	mov	r26, r0
    1cc0:	e9 01       	movw	r28, r18
    1cc2:	4e 81       	ldd	r20, Y+6	; 0x06
    1cc4:	5f 81       	ldd	r21, Y+7	; 0x07
    1cc6:	68 85       	ldd	r22, Y+8	; 0x08
    1cc8:	79 85       	ldd	r23, Y+9	; 0x09
    1cca:	84 1b       	sub	r24, r20
    1ccc:	95 0b       	sbc	r25, r21
    1cce:	a6 0b       	sbc	r26, r22
    1cd0:	b7 0b       	sbc	r27, r23
    1cd2:	18 16       	cp	r1, r24
    1cd4:	19 06       	cpc	r1, r25
    1cd6:	1a 06       	cpc	r1, r26
    1cd8:	1b 06       	cpc	r1, r27
    1cda:	0c f0       	brlt	.+2      	; 0x1cde <run+0x94>
    1cdc:	b6 cf       	rjmp	.-148    	; 0x1c4a <run>
    1cde:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <activeStack+0x1>
    1ce2:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <activeStack>
    1ce6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <threadPool>
    1cea:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <threadPool+0x1>
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <threadPool+0x1>
    1cf6:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <threadPool>
    1cfa:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <activeStack>
    1cfe:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <activeStack+0x1>
    1d02:	14 96       	adiw	r26, 0x04	; 4
    1d04:	ed 91       	ld	r30, X+
    1d06:	fc 91       	ld	r31, X
    1d08:	15 97       	sbiw	r26, 0x05	; 5
    1d0a:	30 97       	sbiw	r30, 0x00	; 0
    1d0c:	41 f0       	breq	.+16     	; 0x1d1e <run+0xd4>
    1d0e:	a0 81       	ld	r26, Z
    1d10:	b1 81       	ldd	r27, Z+1	; 0x01
    1d12:	14 96       	adiw	r26, 0x04	; 4
    1d14:	ed 91       	ld	r30, X+
    1d16:	fc 91       	ld	r31, X
    1d18:	15 97       	sbiw	r26, 0x05	; 5
    1d1a:	30 97       	sbiw	r30, 0x00	; 0
    1d1c:	c1 f7       	brne	.-16     	; 0x1d0e <run+0xc4>
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <dispatch>
    1d24:	92 cf       	rjmp	.-220    	; 0x1c4a <run>

00001d26 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1d26:	42 31       	cpi	r20, 0x12	; 18
    1d28:	b8 f4       	brcc	.+46     	; 0x1d58 <install+0x32>
        char status;
        DISABLE(status);
    1d2a:	2f b7       	in	r18, 0x3f	; 63
    1d2c:	f8 94       	cli
        otable[i] = obj;
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	44 0f       	add	r20, r20
    1d32:	55 1f       	adc	r21, r21
    1d34:	fa 01       	movw	r30, r20
    1d36:	ea 5c       	subi	r30, 0xCA	; 202
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
        mtable[i] = m;
    1d3e:	fa 01       	movw	r30, r20
    1d40:	e2 53       	subi	r30, 0x32	; 50
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	71 83       	std	Z+1, r23	; 0x01
    1d46:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	53 83       	std	Z+3, r21	; 0x03
    1d50:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1d52:	22 23       	and	r18, r18
    1d54:	0c f4       	brge	.+2      	; 0x1d58 <install+0x32>
    1d56:	78 94       	sei
    1d58:	08 95       	ret

00001d5a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1d5a:	8c 01       	movw	r16, r24
    1d5c:	eb 01       	movw	r28, r22
    1d5e:	7a 01       	movw	r14, r20
    char status;
    DISABLE(status);
    1d60:	8f b7       	in	r24, 0x3f	; 63
    1d62:	f8 94       	cli
    initialize();
    1d64:	0e 94 71 02 	call	0x4e2	; 0x4e2 <initialize>
    ENABLE(1);
    1d68:	78 94       	sei
    if (m != NULL)
    1d6a:	20 97       	sbiw	r28, 0x00	; 0
    1d6c:	21 f0       	breq	.+8      	; 0x1d76 <tinytimber+0x1c>
        m(obj, arg);
    1d6e:	b7 01       	movw	r22, r14
    1d70:	c8 01       	movw	r24, r16
    1d72:	fe 01       	movw	r30, r28
    1d74:	09 95       	icall
    DISABLE(status);
    1d76:	8f b7       	in	r24, 0x3f	; 63
    1d78:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1d7a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <schedule>
    ENABLE(1);
    1d7e:	78 94       	sei
    while (1) {
        SLEEP();
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	83 bf       	out	0x33, r24	; 51
    1d84:	88 95       	sleep
    1d86:	fd cf       	rjmp	.-6      	; 0x1d82 <tinytimber+0x28>

00001d88 <receivedUSART>:
 *  Author: Robin Andersson
 */ 

#include "USARTinterrupt.h"

void receivedUSART(USART *self){
    1d88:	cf 92       	push	r12
    1d8a:	df 92       	push	r13
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
	uint8_t Data = UDR0;
    1d94:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	ASYNC(self->controller, bitUSART, Data);
    1d98:	d1 2c       	mov	r13, r1
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	04 81       	ldd	r16, Z+4	; 0x04
    1d9e:	15 81       	ldd	r17, Z+5	; 0x05
    1da0:	0f 2e       	mov	r0, r31
    1da2:	fa e0       	ldi	r31, 0x0A	; 10
    1da4:	ef 2e       	mov	r14, r31
    1da6:	f1 e0       	ldi	r31, 0x01	; 1
    1da8:	ff 2e       	mov	r15, r31
    1daa:	f0 2d       	mov	r31, r0
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	cb 01       	movw	r24, r22
    1db8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <async>
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	08 95       	ret

00001dca <__divmodsi4>:
    1dca:	05 2e       	mov	r0, r21
    1dcc:	97 fb       	bst	r25, 7
    1dce:	1e f4       	brtc	.+6      	; 0x1dd6 <__divmodsi4+0xc>
    1dd0:	00 94       	com	r0
    1dd2:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <__negsi2>
    1dd6:	57 fd       	sbrc	r21, 7
    1dd8:	07 d0       	rcall	.+14     	; 0x1de8 <__divmodsi4_neg2>
    1dda:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__udivmodsi4>
    1dde:	07 fc       	sbrc	r0, 7
    1de0:	03 d0       	rcall	.+6      	; 0x1de8 <__divmodsi4_neg2>
    1de2:	4e f4       	brtc	.+18     	; 0x1df6 <__divmodsi4_exit>
    1de4:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <__negsi2>

00001de8 <__divmodsi4_neg2>:
    1de8:	50 95       	com	r21
    1dea:	40 95       	com	r20
    1dec:	30 95       	com	r19
    1dee:	21 95       	neg	r18
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	4f 4f       	sbci	r20, 0xFF	; 255
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255

00001df6 <__divmodsi4_exit>:
    1df6:	08 95       	ret

00001df8 <__negsi2>:
    1df8:	90 95       	com	r25
    1dfa:	80 95       	com	r24
    1dfc:	70 95       	com	r23
    1dfe:	61 95       	neg	r22
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	8f 4f       	sbci	r24, 0xFF	; 255
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	08 95       	ret

00001e08 <__udivmodsi4>:
    1e08:	a1 e2       	ldi	r26, 0x21	; 33
    1e0a:	1a 2e       	mov	r1, r26
    1e0c:	aa 1b       	sub	r26, r26
    1e0e:	bb 1b       	sub	r27, r27
    1e10:	fd 01       	movw	r30, r26
    1e12:	0d c0       	rjmp	.+26     	; 0x1e2e <__udivmodsi4_ep>

00001e14 <__udivmodsi4_loop>:
    1e14:	aa 1f       	adc	r26, r26
    1e16:	bb 1f       	adc	r27, r27
    1e18:	ee 1f       	adc	r30, r30
    1e1a:	ff 1f       	adc	r31, r31
    1e1c:	a2 17       	cp	r26, r18
    1e1e:	b3 07       	cpc	r27, r19
    1e20:	e4 07       	cpc	r30, r20
    1e22:	f5 07       	cpc	r31, r21
    1e24:	20 f0       	brcs	.+8      	; 0x1e2e <__udivmodsi4_ep>
    1e26:	a2 1b       	sub	r26, r18
    1e28:	b3 0b       	sbc	r27, r19
    1e2a:	e4 0b       	sbc	r30, r20
    1e2c:	f5 0b       	sbc	r31, r21

00001e2e <__udivmodsi4_ep>:
    1e2e:	66 1f       	adc	r22, r22
    1e30:	77 1f       	adc	r23, r23
    1e32:	88 1f       	adc	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	1a 94       	dec	r1
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <__udivmodsi4_loop>
    1e3a:	60 95       	com	r22
    1e3c:	70 95       	com	r23
    1e3e:	80 95       	com	r24
    1e40:	90 95       	com	r25
    1e42:	9b 01       	movw	r18, r22
    1e44:	ac 01       	movw	r20, r24
    1e46:	bd 01       	movw	r22, r26
    1e48:	cf 01       	movw	r24, r30
    1e4a:	08 95       	ret

00001e4c <setjmp>:
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	2d 92       	st	X+, r2
    1e50:	3d 92       	st	X+, r3
    1e52:	4d 92       	st	X+, r4
    1e54:	5d 92       	st	X+, r5
    1e56:	6d 92       	st	X+, r6
    1e58:	7d 92       	st	X+, r7
    1e5a:	8d 92       	st	X+, r8
    1e5c:	9d 92       	st	X+, r9
    1e5e:	ad 92       	st	X+, r10
    1e60:	bd 92       	st	X+, r11
    1e62:	cd 92       	st	X+, r12
    1e64:	dd 92       	st	X+, r13
    1e66:	ed 92       	st	X+, r14
    1e68:	fd 92       	st	X+, r15
    1e6a:	0d 93       	st	X+, r16
    1e6c:	1d 93       	st	X+, r17
    1e6e:	cd 93       	st	X+, r28
    1e70:	dd 93       	st	X+, r29
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	8d b7       	in	r24, 0x3d	; 61
    1e78:	8d 93       	st	X+, r24
    1e7a:	8e b7       	in	r24, 0x3e	; 62
    1e7c:	8d 93       	st	X+, r24
    1e7e:	8f b7       	in	r24, 0x3f	; 63
    1e80:	8d 93       	st	X+, r24
    1e82:	ed 93       	st	X+, r30
    1e84:	fd 93       	st	X+, r31
    1e86:	88 27       	eor	r24, r24
    1e88:	99 27       	eor	r25, r25
    1e8a:	09 94       	ijmp

00001e8c <longjmp>:
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	81 1d       	adc	r24, r1
    1e96:	2d 90       	ld	r2, X+
    1e98:	3d 90       	ld	r3, X+
    1e9a:	4d 90       	ld	r4, X+
    1e9c:	5d 90       	ld	r5, X+
    1e9e:	6d 90       	ld	r6, X+
    1ea0:	7d 90       	ld	r7, X+
    1ea2:	8d 90       	ld	r8, X+
    1ea4:	9d 90       	ld	r9, X+
    1ea6:	ad 90       	ld	r10, X+
    1ea8:	bd 90       	ld	r11, X+
    1eaa:	cd 90       	ld	r12, X+
    1eac:	dd 90       	ld	r13, X+
    1eae:	ed 90       	ld	r14, X+
    1eb0:	fd 90       	ld	r15, X+
    1eb2:	0d 91       	ld	r16, X+
    1eb4:	1d 91       	ld	r17, X+
    1eb6:	cd 91       	ld	r28, X+
    1eb8:	dd 91       	ld	r29, X+
    1eba:	ed 91       	ld	r30, X+
    1ebc:	fd 91       	ld	r31, X+
    1ebe:	0d 90       	ld	r0, X+
    1ec0:	f8 94       	cli
    1ec2:	fe bf       	out	0x3e, r31	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	ed bf       	out	0x3d, r30	; 61
    1ec8:	ed 91       	ld	r30, X+
    1eca:	fd 91       	ld	r31, X+
    1ecc:	09 94       	ijmp

00001ece <_exit>:
    1ece:	f8 94       	cli

00001ed0 <__stop_program>:
    1ed0:	ff cf       	rjmp	.-2      	; 0x1ed0 <__stop_program>
